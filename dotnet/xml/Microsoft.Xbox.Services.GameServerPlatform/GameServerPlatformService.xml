<Type Name="GameServerPlatformService" FullName="Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService">
  <TypeSignature Language="C#" Value="public sealed class GameServerPlatformService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed GameServerPlatformService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllocateClusterAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.ClusterResult&gt; AllocateClusterAsync (uint gameServerTitleId, string serviceConfigurationId, string sessionTemplateName, string sessionName, bool abortIfQueued);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.GameServerPlatform.ClusterResult&gt; AllocateClusterAsync([in]unsigned int32 gameServerTitleId, [in]string serviceConfigurationId, [in]string sessionTemplateName, [in]string sessionName, [in]bool abortIfQueued) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService.AllocateClusterAsync(System.UInt32,System.String,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.ClusterResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameServerTitleId" Type="System.UInt32" />
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="sessionTemplateName" Type="System.String" />
        <Parameter Name="sessionName" Type="System.String" />
        <Parameter Name="abortIfQueued" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="gameServerTitleId">To be added.</param>
        <param name="serviceConfigurationId">To be added.</param>
        <param name="sessionTemplateName">To be added.</param>
        <param name="sessionName">To be added.</param>
        <param name="abortIfQueued">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateClusterInlineAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.ClusterResult&gt; AllocateClusterInlineAsync (uint gameServerTitleId, string serviceConfigurationId, string sandboxId, string ticketId, string gsiSetId, string gameVariantId, ulong maxAllowedPlayers, string location, bool abortIfQueued);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.GameServerPlatform.ClusterResult&gt; AllocateClusterInlineAsync([in]unsigned int32 gameServerTitleId, [in]string serviceConfigurationId, [in]string sandboxId, [in]string ticketId, [in]string gsiSetId, [in]string gameVariantId, [in]unsigned int64 maxAllowedPlayers, [in]string location, [in]bool abortIfQueued) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService.AllocateClusterInlineAsync(System.UInt32,System.String,System.String,System.String,System.String,System.String,System.UInt64,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.ClusterResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameServerTitleId" Type="System.UInt32" />
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="sandboxId" Type="System.String" />
        <Parameter Name="ticketId" Type="System.String" />
        <Parameter Name="gsiSetId" Type="System.String" />
        <Parameter Name="gameVariantId" Type="System.String" />
        <Parameter Name="maxAllowedPlayers" Type="System.UInt64" />
        <Parameter Name="location" Type="System.String" />
        <Parameter Name="abortIfQueued" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="gameServerTitleId">To be added.</param>
        <param name="serviceConfigurationId">To be added.</param>
        <param name="sandboxId">To be added.</param>
        <param name="ticketId">To be added.</param>
        <param name="gsiSetId">To be added.</param>
        <param name="gameVariantId">To be added.</param>
        <param name="maxAllowedPlayers">To be added.</param>
        <param name="location">To be added.</param>
        <param name="abortIfQueued">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateSessionHost">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.AllocationResult&gt; AllocateSessionHost (uint gameServerTitleId, Windows.Foundation.Collections.IVectorView&lt;string&gt; locations, string sessionId, string cloudGameId, string gameModeId, string sessionCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.GameServerPlatform.AllocationResult&gt; AllocateSessionHost([in]unsigned int32 gameServerTitleId, [in]class Windows.Foundation.Collections.IVectorView`1&lt;string&gt; locations, [in]string sessionId, [in]string cloudGameId, [in]string gameModeId, [in]string sessionCookie) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService.AllocateSessionHost(System.UInt32,Windows.Foundation.Collections.IVectorView{System.String},System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.AllocationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameServerTitleId" Type="System.UInt32" />
        <Parameter Name="locations" Type="Windows.Foundation.Collections.IVectorView&lt;System.String&gt;" />
        <Parameter Name="sessionId" Type="System.String" />
        <Parameter Name="cloudGameId" Type="System.String" />
        <Parameter Name="gameModeId" Type="System.String" />
        <Parameter Name="sessionCookie" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gameServerTitleId">To be added.</param>
        <param name="locations">To be added.</param>
        <param name="sessionId">To be added.</param>
        <param name="cloudGameId">To be added.</param>
        <param name="gameModeId">To be added.</param>
        <param name="sessionCookie">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGameServerMetadataAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.GameServerMetadataResult&gt; GetGameServerMetadataAsync (uint titleId, uint maxAllowedPlayers, bool publisherOnly, uint maxVariants, string locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.GameServerPlatform.GameServerMetadataResult&gt; GetGameServerMetadataAsync([in]unsigned int32 titleId, [in]unsigned int32 maxAllowedPlayers, [in]bool publisherOnly, [in]unsigned int32 maxVariants, [in]string locale) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService.GetGameServerMetadataAsync(System.UInt32,System.UInt32,System.Boolean,System.UInt32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("GetGameServerMetadataAsync2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.GameServerMetadataResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="titleId" Type="System.UInt32" />
        <Parameter Name="maxAllowedPlayers" Type="System.UInt32" />
        <Parameter Name="publisherOnly" Type="System.Boolean" />
        <Parameter Name="maxVariants" Type="System.UInt32" />
        <Parameter Name="locale" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="titleId">To be added.</param>
        <param name="maxAllowedPlayers">To be added.</param>
        <param name="publisherOnly">To be added.</param>
        <param name="maxVariants">To be added.</param>
        <param name="locale">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGameServerMetadataAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.GameServerMetadataResult&gt; GetGameServerMetadataAsync (uint titleId, uint maxAllowedPlayers, bool publisherOnly, uint maxVariants, string locale, Windows.Foundation.Collections.IMapView&lt;string,string&gt; filterTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.GameServerPlatform.GameServerMetadataResult&gt; GetGameServerMetadataAsync([in]unsigned int32 titleId, [in]unsigned int32 maxAllowedPlayers, [in]bool publisherOnly, [in]unsigned int32 maxVariants, [in]string locale, [in]class Windows.Foundation.Collections.IMapView`2&lt;string, string&gt; filterTags) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService.GetGameServerMetadataAsync(System.UInt32,System.UInt32,System.Boolean,System.UInt32,System.String,Windows.Foundation.Collections.IMapView{System.String,System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("GetGameServerMetadataAsync1")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.GameServerMetadataResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="titleId" Type="System.UInt32" />
        <Parameter Name="maxAllowedPlayers" Type="System.UInt32" />
        <Parameter Name="publisherOnly" Type="System.Boolean" />
        <Parameter Name="maxVariants" Type="System.UInt32" />
        <Parameter Name="locale" Type="System.String" />
        <Parameter Name="filterTags" Type="Windows.Foundation.Collections.IMapView&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="titleId">To be added.</param>
        <param name="maxAllowedPlayers">To be added.</param>
        <param name="publisherOnly">To be added.</param>
        <param name="maxVariants">To be added.</param>
        <param name="locale">To be added.</param>
        <param name="filterTags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQualityOfServiceServersAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.GameServerPlatform.QualityOfServiceServer&gt;&gt; GetQualityOfServiceServersAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.GameServerPlatform.QualityOfServiceServer&gt;&gt; GetQualityOfServiceServersAsync() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService.GetQualityOfServiceServersAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.GameServerPlatform.QualityOfServiceServer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionHostAllocationStatus">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.AllocationResult&gt; GetSessionHostAllocationStatus (uint gameServerTitleId, string sessionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.GameServerPlatform.AllocationResult&gt; GetSessionHostAllocationStatus([in]unsigned int32 gameServerTitleId, [in]string sessionId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService.GetSessionHostAllocationStatus(System.UInt32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.AllocationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameServerTitleId" Type="System.UInt32" />
        <Parameter Name="sessionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gameServerTitleId">To be added.</param>
        <param name="sessionId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTicketStatusAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.GameServerTicketStatus&gt; GetTicketStatusAsync (uint gameServerTitleId, string ticketId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.GameServerPlatform.GameServerTicketStatus&gt; GetTicketStatusAsync([in]unsigned int32 gameServerTitleId, [in]string ticketId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.GameServerPlatform.GameServerPlatformService.GetTicketStatusAsync(System.UInt32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.GameServerPlatform.GameServerTicketStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameServerTitleId" Type="System.UInt32" />
        <Parameter Name="ticketId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="gameServerTitleId">To be added.</param>
        <param name="ticketId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
