<Type Name="XboxLiveContextSettings" FullName="Microsoft.Xbox.Services.XboxLiveContextSettings">
  <TypeSignature Language="C#" Value="public sealed class XboxLiveContextSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XboxLiveContextSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.XboxLiveContextSettings" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Activatable(1)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Represents settings for an HTTP call.
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XboxLiveContextSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.XboxLiveContextSettings.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("CreateInstance1")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiagnosticsTraceLevel">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.XboxServicesDiagnosticsTraceLevel DiagnosticsTraceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Xbox.Services.XboxServicesDiagnosticsTraceLevel DiagnosticsTraceLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.XboxLiveContextSettings.DiagnosticsTraceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Deprecated("Call XboxLiveServicesSettings::SingletonInstance-&gt;DiagnosticsTraceLevel instead", Windows.Foundation.Metadata.DeprecationType.Deprecate, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.XboxServicesDiagnosticsTraceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Indicates the level of debug messages to send to the debugger's Output window.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableAssertsForMaximumNumberOfWebsocketsActivated">
      <MemberSignature Language="C#" Value="public void DisableAssertsForMaximumNumberOfWebsocketsActivated (Microsoft.Xbox.Services.XboxLiveContextRecommendedSetting setting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableAssertsForMaximumNumberOfWebsocketsActivated([in]valuetype Microsoft.Xbox.Services.XboxLiveContextRecommendedSetting setting) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.XboxLiveContextSettings.DisableAssertsForMaximumNumberOfWebsocketsActivated(Microsoft.Xbox.Services.XboxLiveContextRecommendedSetting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="setting" Type="Microsoft.Xbox.Services.XboxLiveContextRecommendedSetting" />
      </Parameters>
      <Docs>
        <param name="setting">To be added.</param>
        <summary>
Disables asserts for having maximum number of websockets being activated.
It is best practice to not call this API, and instead adjust the calling pattern but this is provided
as a temporary way to get unblocked while in early stages of game development.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableAssertsForXboxLiveThrottlingInDevSandboxes">
      <MemberSignature Language="C#" Value="public void DisableAssertsForXboxLiveThrottlingInDevSandboxes (Microsoft.Xbox.Services.XboxLiveContextThrottleSetting setting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableAssertsForXboxLiveThrottlingInDevSandboxes([in]valuetype Microsoft.Xbox.Services.XboxLiveContextThrottleSetting setting) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.XboxLiveContextSettings.DisableAssertsForXboxLiveThrottlingInDevSandboxes(Microsoft.Xbox.Services.XboxLiveContextThrottleSetting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="setting" Type="Microsoft.Xbox.Services.XboxLiveContextThrottleSetting" />
      </Parameters>
      <Docs>
        <param name="setting">To be added.</param>
        <summary>
Disables asserts for Xbox Live throttling in dev sandboxes.
The asserts will not fire in RETAIL sandbox, and this setting has has no affect in RETAIL sandboxes.
It is best practice to not call this API, and instead adjust the calling pattern but this is provided
as a temporary way to get unblocked while in early stages of game development.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableServiceCallRoutedEvents">
      <MemberSignature Language="C#" Value="public bool EnableServiceCallRoutedEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableServiceCallRoutedEvents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.XboxLiveContextSettings.EnableServiceCallRoutedEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Indicates if events should be generated for ServiceCallRouted.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpRetryDelay">
      <MemberSignature Language="C#" Value="public Windows.Foundation.TimeSpan HttpRetryDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Windows.Foundation.TimeSpan HttpRetryDelay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.XboxLiveContextSettings.HttpRetryDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Controls the HTTP retry delay in seconds.

Retries are delayed using a exponential back off.  By default, it will delay 2 seconds then the 
next retry will delay 4 seconds, then 8 seconds, and so on up to a max of 1 min until either
the call succeeds or the http_timeout_window is reached, at which point the call will fail.
The delay is also jittered between the current and next delay to spread out service load.
The default for http_timeout_window is 20 seconds and can be changed using set_http_timeout_window()

If the service returns an an HTTP error with a "Retry-After" header, then all future calls to that API 
will immediately fail with the original error without contacting the service until the "Retry-After" 
time has been reached.

Idempotent service calls are retried when a network error occurs or the server responds with one of these HTTP status codes:
408 (Request Timeout)
429 (Too Many Requests)
500 (Internal Server Error)
502 (Bad Gateway)
503 (Service Unavailable)
504 (Gateway Timeout)
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpTimeout">
      <MemberSignature Language="C#" Value="public Windows.Foundation.TimeSpan HttpTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Windows.Foundation.TimeSpan HttpTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.XboxLiveContextSettings.HttpTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
DEPRECATED.  This value is ignored and is now automatically calculated to ensure the http_timeout_window() is obeyed
This means that calls will be more deterministic about the time window they return in.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpTimeoutWindow">
      <MemberSignature Language="C#" Value="public Windows.Foundation.TimeSpan HttpTimeoutWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Windows.Foundation.TimeSpan HttpTimeoutWindow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.XboxLiveContextSettings.HttpTimeoutWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Controls the HTTP timeout window in seconds.

This controls how long to spend attempting to retry idempotent service calls before failing.
The default is 20 seconds

Idempotent service calls are retried when a network error occurs or the server responds with one of these HTTP status codes:
408 (Request Timeout)
429 (Too Many Requests)
500 (Internal Server Error)
502 (Bad Gateway)
503 (Service Unavailable)
504 (Gateway Timeout)
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LongHttpTimeout">
      <MemberSignature Language="C#" Value="public Windows.Foundation.TimeSpan LongHttpTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Windows.Foundation.TimeSpan LongHttpTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.XboxLiveContextSettings.LongHttpTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Controls the connect, send, and receive timeouts for HTTP socket operations of long calls such as Title Storage calls.
Default is 5 minutes.  Calls that take longer than this are aborted.
Take care when setting this to smaller values as some calls like Title Storage may take a few minutes to complete.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceCallRouted">
      <MemberSignature Language="C#" Value="public event Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.XboxServiceCallRoutedEventArgs&gt; ServiceCallRouted;" />
      <MemberSignature Language="ILAsm" Value=".event class Windows.Foundation.EventHandler`1&lt;class Microsoft.Xbox.Services.XboxServiceCallRoutedEventArgs&gt; ServiceCallRouted" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Xbox.Services.XboxLiveContextSettings.ServiceCallRouted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.XboxServiceCallRoutedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Registers for all service call notifications.  Event handlers will receive an XboxServiceCallRoutedEventArgs object.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCoreDispatcherForEventRouting">
      <MemberSignature Language="C#" Value="public bool UseCoreDispatcherForEventRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCoreDispatcherForEventRouting" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.XboxLiveContextSettings.UseCoreDispatcherForEventRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Controls whether to use the CoreDispatcher from the User object to route events through. 
This is required to be false if using events with JavaScript.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WebsocketTimeoutWindow">
      <MemberSignature Language="C#" Value="public Windows.Foundation.TimeSpan WebsocketTimeoutWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Windows.Foundation.TimeSpan WebsocketTimeoutWindow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.XboxLiveContextSettings.WebsocketTimeoutWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Controls how long to spend attempting to retry establishing a websocket connection before failing. 
Default is 300 seconds.  Set to 0 to turn off retry.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
