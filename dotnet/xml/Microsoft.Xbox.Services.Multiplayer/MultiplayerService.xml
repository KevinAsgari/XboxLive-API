<Type Name="MultiplayerService" FullName="Microsoft.Xbox.Services.Multiplayer.MultiplayerService">
  <TypeSignature Language="C#" Value="public sealed class MultiplayerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MultiplayerService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.Multiplayer.MultiplayerService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MultiplayerService" />
  <TypeSignature Language="F#" Value="type MultiplayerService = class&#xA;    interface __IMultiplayerServicePublicNonVirtuals&#xA;    interface __IMultiplayerServiceProtectedNonVirtuals" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Handles interactions with an Xbox Live service endpoint on a server.
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ClearActivityAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction ClearActivityAsync (string serviceConfigurationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncAction ClearActivityAsync([in]string serviceConfigurationId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.ClearActivityAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearActivityAsync (serviceConfigurationId As String) As IAsyncAction" />
      <MemberSignature Language="F#" Value="abstract member ClearActivityAsync : string -&gt; Windows.Foundation.IAsyncAction&#xA;override this.ClearActivityAsync : string -&gt; Windows.Foundation.IAsyncAction" Usage="multiplayerService.ClearActivityAsync serviceConfigurationId" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.ClearActivityAsync(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">A string containing the service configuration ID in which to clear activity.</param>
        <summary>
Clears the user's current activity session for the specified service configuration ID.
</summary>
        <returns>Returns an IAsyncAction object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncAction.Completed property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearSearchHandleAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction ClearSearchHandleAsync (string handleId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncAction ClearSearchHandleAsync([in]string handleId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.ClearSearchHandleAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearSearchHandleAsync (handleId As String) As IAsyncAction" />
      <MemberSignature Language="F#" Value="abstract member ClearSearchHandleAsync : string -&gt; Windows.Foundation.IAsyncAction&#xA;override this.ClearSearchHandleAsync : string -&gt; Windows.Foundation.IAsyncAction" Usage="multiplayerService.ClearSearchHandleAsync handleId" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.ClearSearchHandleAsync(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handleId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handleId">The handleId associated with the session to clear.</param>
        <summary>
Clears the search handle that is associated with the session.
</summary>
        <returns>The async object for notifying when the operation is completed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableMultiplayerSubscriptions">
      <MemberSignature Language="C#" Value="public void DisableMultiplayerSubscriptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableMultiplayerSubscriptions() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.DisableMultiplayerSubscriptions" />
      <MemberSignature Language="VB.NET" Value="Public Sub DisableMultiplayerSubscriptions ()" />
      <MemberSignature Language="F#" Value="abstract member DisableMultiplayerSubscriptions : unit -&gt; unit&#xA;override this.DisableMultiplayerSubscriptions : unit -&gt; unit" Usage="multiplayerService.DisableMultiplayerSubscriptions " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.DisableMultiplayerSubscriptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
Stops multiplayerservice connectivity via Real Time Activity (RTA).
</summary>
        <remarks>
When stopping multiplayer is complete, a MultiplayerSubscriptionsLost event is fired.
It is not necessary to wait for this event to fire, unless you intend to call EnableMultiplayerSubscriptions() to restart it,
in which case you must wait for the stop to complete.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableMultiplayerSubscriptions">
      <MemberSignature Language="C#" Value="public void EnableMultiplayerSubscriptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnableMultiplayerSubscriptions() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.EnableMultiplayerSubscriptions" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnableMultiplayerSubscriptions ()" />
      <MemberSignature Language="F#" Value="abstract member EnableMultiplayerSubscriptions : unit -&gt; unit&#xA;override this.EnableMultiplayerSubscriptions : unit -&gt; unit" Usage="multiplayerService.EnableMultiplayerSubscriptions " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.EnableMultiplayerSubscriptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
Starts multiplayerservice connectivity via Real Time Activity (RTA), for two purposes:
1. Subscriptions to changes on specific sessions, using the MultiplayerSession object.
2. Automatic removal of members from sessions when the collection underlying this multiplayer subscription is broken.

This method does not actually make the connection, but enables the connection, and helps track its lifetime.
</summary>
        <remarks>
This method fails if called twice, unless the multiplayerconnection has been lost or stopped in the interim.  
This can be detected by listening for the MultiplayerSubscriptionsLost event.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivitiesForSocialGroupAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt; GetActivitiesForSocialGroupAsync (string serviceConfigurationId, string socialGroupOwnerXboxUserId, string socialGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt; GetActivitiesForSocialGroupAsync([in]string serviceConfigurationId, [in]string socialGroupOwnerXboxUserId, [in]string socialGroup) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetActivitiesForSocialGroupAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetActivitiesForSocialGroupAsync (serviceConfigurationId As String, socialGroupOwnerXboxUserId As String, socialGroup As String) As IAsyncOperation(Of IVectorView(Of MultiplayerActivityDetails))" />
      <MemberSignature Language="F#" Value="abstract member GetActivitiesForSocialGroupAsync : string * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt;&#xA;override this.GetActivitiesForSocialGroupAsync : string * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt;" Usage="multiplayerService.GetActivitiesForSocialGroupAsync (serviceConfigurationId, socialGroupOwnerXboxUserId, socialGroup)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetActivitiesForSocialGroupAsync(System.String,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="socialGroupOwnerXboxUserId" Type="System.String" />
        <Parameter Name="socialGroup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">The service configuration ID to query for activities.</param>
        <param name="socialGroupOwnerXboxUserId">The Xbox user ID of the person whose social group will be used for the query.</param>
        <param name="socialGroup">The social group ID to use in order to get the list of users. (e.g. "friends" or "favorites").</param>
        <summary>
Gets the current activity for a social group of users associated with a user that is designated as
the owner of the session.
</summary>
        <returns>The async object for notifying when the operation is completed.  
This contains a vectorview of MultiplayerActivityDetails objects, containing the details of the activities of the targeted users.</returns>
        <remarks>
There is no paging or continuation, and the multiplayer service limit the number of items returned to 100.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivitiesForUsersAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt; GetActivitiesForUsersAsync (string serviceConfigurationId, Windows.Foundation.Collections.IVectorView&lt;string&gt; xboxUserIds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt; GetActivitiesForUsersAsync([in]string serviceConfigurationId, [in]class Windows.Foundation.Collections.IVectorView`1&lt;string&gt; xboxUserIds) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetActivitiesForUsersAsync(System.String,Windows.Foundation.Collections.IVectorView{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetActivitiesForUsersAsync (serviceConfigurationId As String, xboxUserIds As IVectorView(Of String)) As IAsyncOperation(Of IVectorView(Of MultiplayerActivityDetails))" />
      <MemberSignature Language="F#" Value="abstract member GetActivitiesForUsersAsync : string * Windows.Foundation.Collections.IVectorView&lt;string&gt; -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt;&#xA;override this.GetActivitiesForUsersAsync : string * Windows.Foundation.Collections.IVectorView&lt;string&gt; -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt;" Usage="multiplayerService.GetActivitiesForUsersAsync (serviceConfigurationId, xboxUserIds)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetActivitiesForUsersAsync(System.String,Windows.Foundation.Collections.IVectorView{System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerActivityDetails&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="xboxUserIds" Type="Windows.Foundation.Collections.IVectorView&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">To be added.</param>
        <param name="xboxUserIds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentSessionAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt; GetCurrentSessionAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference sessionReference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt; GetCurrentSessionAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference sessionReference) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetCurrentSessionAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentSessionAsync (sessionReference As MultiplayerSessionReference) As IAsyncOperation(Of MultiplayerSession)" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentSessionAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;&#xA;override this.GetCurrentSessionAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;" Usage="multiplayerService.GetCurrentSessionAsync sessionReference" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetCurrentSessionAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionReference" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference" />
      </Parameters>
      <Docs>
        <param name="sessionReference">A MultiplayerSessionReference object that contains identifying information for the session.</param>
        <summary>
Gets a session object, with all of its attributes, from the server.
</summary>
        <returns>
Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is a MultiplayerSession object containing the response returned from the server.
</returns>
        <remarks>
If the client tries to get a session that does not exist, this method returns an HTTP/204 status code.
Additionally an exception is thrown for trying to retrieve a nonexistent session. 

Calls V102 GET /serviceconfigs/{serviceConfigurationId}/sessionTemplates/{sessiontemplateName}/sessions/{sessionName}</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentSessionByHandleAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt; GetCurrentSessionByHandleAsync (string handleId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt; GetCurrentSessionByHandleAsync([in]string handleId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetCurrentSessionByHandleAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentSessionByHandleAsync (handleId As String) As IAsyncOperation(Of MultiplayerSession)" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentSessionByHandleAsync : string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;&#xA;override this.GetCurrentSessionByHandleAsync : string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;" Usage="multiplayerService.GetCurrentSessionByHandleAsync handleId" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetCurrentSessionByHandleAsync(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handleId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handleId">A multiplayer handle id, which uniquely identifies the session.</param>
        <summary>
Gets a session object with all its attributes from the server, given a session handle id.
A handle is a service-side pointer to a session.  The handleid is a GUID identifier of the handle.  Callers will
usually get the handleid either from another player's MultiplayerActivityDetails, or from a protocol
activation after a user has accepted an invite.
</summary>
        <returns>
Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is a MultiplayerSession object that contains the response returned from the server.</returns>
        <remarks>
If the client tries to get a session that does not exist, this method returns an HTTP/204 status code.
Additionally an exception is thrown for trying to retrieve a nonexistent session. 

Calls GET /handles/{handleId}/session</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSearchHandlesAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt; GetSearchHandlesAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerQuerySearchHandleRequest searchHandleRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt; GetSearchHandlesAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerQuerySearchHandleRequest searchHandleRequest) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetSearchHandlesAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerQuerySearchHandleRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSearchHandlesAsync (searchHandleRequest As MultiplayerQuerySearchHandleRequest) As IAsyncOperation(Of IVectorView(Of MultiplayerSearchHandleDetails))" />
      <MemberSignature Language="F#" Value="abstract member GetSearchHandlesAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerQuerySearchHandleRequest -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt;&#xA;override this.GetSearchHandlesAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerQuerySearchHandleRequest -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt;" Usage="multiplayerService.GetSearchHandlesAsync searchHandleRequest" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetSearchHandlesAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerQuerySearchHandleRequest)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("GetSearchHandlesAsync1")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchHandleRequest" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerQuerySearchHandleRequest" />
      </Parameters>
      <Docs>
        <param name="searchHandleRequest"> A search handle request object that queries for the all search handles.</param>
        <summary>
Queries for the all search handles that references the searchable sessions given the specific query.
There is no paging or continuation, and the multiplayer service will limit the number of items returned to 100.
</summary>
        <returns>The async object for notifying when the operation is completed.  This contains a vectorview of MultiplayerSearchHandleDetails objects, containing the details of the search handles.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSearchHandlesAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt; GetSearchHandlesAsync (string serviceConfigurationId, string sessionTemplateName, string orderBy, bool orderAscending, string searchFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt; GetSearchHandlesAsync([in]string serviceConfigurationId, [in]string sessionTemplateName, [in]string orderBy, [in]bool orderAscending, [in]string searchFilter) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetSearchHandlesAsync(System.String,System.String,System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSearchHandlesAsync (serviceConfigurationId As String, sessionTemplateName As String, orderBy As String, orderAscending As Boolean, searchFilter As String) As IAsyncOperation(Of IVectorView(Of MultiplayerSearchHandleDetails))" />
      <MemberSignature Language="F#" Value="abstract member GetSearchHandlesAsync : string * string * string * bool * string -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt;&#xA;override this.GetSearchHandlesAsync : string * string * string * bool * string -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt;" Usage="multiplayerService.GetSearchHandlesAsync (serviceConfigurationId, sessionTemplateName, orderBy, orderAscending, searchFilter)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetSearchHandlesAsync(System.String,System.String,System.String,System.Boolean,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("GetSearchHandlesAsync2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleDetails&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="sessionTemplateName" Type="System.String" />
        <Parameter Name="orderBy" Type="System.String" />
        <Parameter Name="orderAscending" Type="System.Boolean" />
        <Parameter Name="searchFilter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">The scid within which to query for search handles.</param>
        <param name="sessionTemplateName">The name of the template to query for search handles.</param>
        <param name="orderBy">This specifies the attribute to sort the search handles by.  Pass empty string to default to ordering by 'Timestamp asc' </param>
        <param name="orderAscending">Pass true to order ascending, false to order descending</param>
        <param name="searchFilter">The query string to get the search handles for.
The search query.
The query syntax is an OData like syntax with only the following operators supported EQ, NE, GE, GT, LE and LT along with the logical operators of AND and OR.

Example 1:
To search for search handles for a specific XboxUserId use
    "MemberXuids/any(d:d eq '12345678')" or "OwnerXuids/any(d:d eq '12345678')"

Example 2:
To search for search handles for a title defined string metadata use
    "Strings/stringMetadataType eq 'value'"

Example 3:
To search for search handles for a title defined numbers metadata AND a tag type value use
    "Numbers/numberMetadataType eq 53 AND Tags/tagType eq 'value'"
</param>
        <summary>
Queries for the all search handles that references the searchable sessions given the specific query.
There is no paging or continuation, and the multiplayer service will limit the number of items returned to 100.
Call GetSearchHandlesAsync(MultiplayerQuerySearchHandleRequest^ ) instead.
</summary>
        <returns>The async object for notifying when the operation is completed.  This contains a vectorview of MultiplayerSearchHandleDetails objects, containing the details of the search handles.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionsAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt; GetSessionsAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerGetSessionsRequest getSessionsRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt; GetSessionsAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerGetSessionsRequest getSessionsRequest) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetSessionsAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerGetSessionsRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSessionsAsync (getSessionsRequest As MultiplayerGetSessionsRequest) As IAsyncOperation(Of IVectorView(Of MultiplayerSessionStates))" />
      <MemberSignature Language="F#" Value="abstract member GetSessionsAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerGetSessionsRequest -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;&#xA;override this.GetSessionsAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerGetSessionsRequest -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;" Usage="multiplayerService.GetSessionsAsync getSessionsRequest" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetSessionsAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerGetSessionsRequest)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("GetSessionsAsync2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getSessionsRequest" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerGetSessionsRequest" />
      </Parameters>
      <Docs>
        <param name="getSessionsRequest">An object that defines the search filters for retrieveing a collection of discoverable sessions.</param>
        <summary>
Retrieve a list of sessions with various filters. You can use this method to filter sessions for a single Xbox User ID,
a collection of Xbox User IDs, or for a keyword.
</summary>
        <returns>
Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is a collection of SessionStates objects where each object contains metadata about one session.
</returns>
        <remarks>
You can use this method to filter sessions for a collection of Xbox User IDs.

Calls V102 GET /serviceconfigs/{scid}/sessions or /serviceconfigs/{scid}/sessiontemplates/{session-template-name}/sessions
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionsAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt; GetSessionsAsync (string serviceConfigurationId, string sessionTemplateNameFilter, string xboxUserIdFilter, string keywordFilter, Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility visibilityFilter, uint contractVersionFilter, bool includePrivateSessions, bool includeReservations, bool includeInactiveSessions, uint maxItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt; GetSessionsAsync([in]string serviceConfigurationId, [in]string sessionTemplateNameFilter, [in]string xboxUserIdFilter, [in]string keywordFilter, [in]valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility visibilityFilter, [in]unsigned int32 contractVersionFilter, [in]bool includePrivateSessions, [in]bool includeReservations, [in]bool includeInactiveSessions, [in]unsigned int32 maxItems) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetSessionsAsync(System.String,System.String,System.String,System.String,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSessionsAsync (serviceConfigurationId As String, sessionTemplateNameFilter As String, xboxUserIdFilter As String, keywordFilter As String, visibilityFilter As MultiplayerSessionVisibility, contractVersionFilter As UInteger, includePrivateSessions As Boolean, includeReservations As Boolean, includeInactiveSessions As Boolean, maxItems As UInteger) As IAsyncOperation(Of IVectorView(Of MultiplayerSessionStates))" />
      <MemberSignature Language="F#" Value="abstract member GetSessionsAsync : string * string * string * string * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility * uint32 * bool * bool * bool * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;&#xA;override this.GetSessionsAsync : string * string * string * string * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility * uint32 * bool * bool * bool * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;" Usage="multiplayerService.GetSessionsAsync (serviceConfigurationId, sessionTemplateNameFilter, xboxUserIdFilter, keywordFilter, visibilityFilter, contractVersionFilter, includePrivateSessions, includeReservations, includeInactiveSessions, maxItems)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetSessionsAsync(System.String,System.String,System.String,System.String,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Deprecated("Call GetSessionsAsync(MultiplayerGetSessionsRequest^) instead", Windows.Foundation.Metadata.DeprecationType.Deprecate, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("GetSessionsAsync1")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="sessionTemplateNameFilter" Type="System.String" />
        <Parameter Name="xboxUserIdFilter" Type="System.String" />
        <Parameter Name="keywordFilter" Type="System.String" />
        <Parameter Name="visibilityFilter" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility" />
        <Parameter Name="contractVersionFilter" Type="System.UInt32" />
        <Parameter Name="includePrivateSessions" Type="System.Boolean" />
        <Parameter Name="includeReservations" Type="System.Boolean" />
        <Parameter Name="includeInactiveSessions" Type="System.Boolean" />
        <Parameter Name="maxItems" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">The service configuration id that contains the sessions.</param>
        <param name="sessionTemplateNameFilter">(Optional) The name of the template for the multiplayer session to filter on.</param>
        <param name="xboxUserIdFilter">(Optional) An Xbox user ID to use for filtering results to sessions for that user.
You must specify either xboxUserIdFilter or keywordFilter.</param>
        <param name="keywordFilter">(Optional) A keyword to use for filtering results to sessions with that keyword.
You must specify either xboxUserIdFilter or keywordFilter.</param>
        <param name="visibilityFilter">An enumeration value specifying the visibilty to use for filtering results.</param>
        <param name="contractVersionFilter">A value specifying the major version, or less, of the contract to use for filtering results.
Set to 0 to ignore the contract version.</param>
        <param name="includePrivateSessions">True to include private sessions in the results, and false otherwise.</param>
        <param name="includeReservations">True to include sessions that the user has not accepted in the results, and false otherwise.
For a setting of true, xboxUserIdFilter must be specified.</param>
        <param name="includeInactiveSessions">True to include inactive sessions in the results, and false otherwise.
For a setting of true, xboxUserIdFilter must be specified.</param>
        <param name="maxItems">The maximum number of sessions to return.</param>
        <summary>
Retrieve a list of sessions with various filters
</summary>
        <returns>
Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is a collection of SessionStates objects where each object contains metadata about one session.
</returns>
        <remarks>Calls V105 GET /serviceconfigs/{scid}/sessions or /serviceconfigs/{scid}/sessiontemplates/{session-template-name}/sessions</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionsForUsersFilterAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt; GetSessionsForUsersFilterAsync (string serviceConfigurationId, string sessionTemplateNameFilter, Windows.Foundation.Collections.IVectorView&lt;string&gt; xboxUserIdsFilter, string keywordFilter, Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility visibilityFilter, uint contractVersionFilter, bool includePrivateSessions, bool includeReservations, bool includeInactiveSessions, uint maxItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt; GetSessionsForUsersFilterAsync([in]string serviceConfigurationId, [in]string sessionTemplateNameFilter, [in]class Windows.Foundation.Collections.IVectorView`1&lt;string&gt; xboxUserIdsFilter, [in]string keywordFilter, [in]valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility visibilityFilter, [in]unsigned int32 contractVersionFilter, [in]bool includePrivateSessions, [in]bool includeReservations, [in]bool includeInactiveSessions, [in]unsigned int32 maxItems) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.GetSessionsForUsersFilterAsync(System.String,System.String,Windows.Foundation.Collections.IVectorView{System.String},System.String,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSessionsForUsersFilterAsync (serviceConfigurationId As String, sessionTemplateNameFilter As String, xboxUserIdsFilter As IVectorView(Of String), keywordFilter As String, visibilityFilter As MultiplayerSessionVisibility, contractVersionFilter As UInteger, includePrivateSessions As Boolean, includeReservations As Boolean, includeInactiveSessions As Boolean, maxItems As UInteger) As IAsyncOperation(Of IVectorView(Of MultiplayerSessionStates))" />
      <MemberSignature Language="F#" Value="abstract member GetSessionsForUsersFilterAsync : string * string * Windows.Foundation.Collections.IVectorView&lt;string&gt; * string * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility * uint32 * bool * bool * bool * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;&#xA;override this.GetSessionsForUsersFilterAsync : string * string * Windows.Foundation.Collections.IVectorView&lt;string&gt; * string * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility * uint32 * bool * bool * bool * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;" Usage="multiplayerService.GetSessionsForUsersFilterAsync (serviceConfigurationId, sessionTemplateNameFilter, xboxUserIdsFilter, keywordFilter, visibilityFilter, contractVersionFilter, includePrivateSessions, includeReservations, includeInactiveSessions, maxItems)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.GetSessionsForUsersFilterAsync(System.String,System.String,Windows.Foundation.Collections.IVectorView{System.String},System.String,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Deprecated("Call GetSessionsAsync(MultiplayerGetSessionsRequest^) instead", Windows.Foundation.Metadata.DeprecationType.Deprecate, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionStates&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="sessionTemplateNameFilter" Type="System.String" />
        <Parameter Name="xboxUserIdsFilter" Type="Windows.Foundation.Collections.IVectorView&lt;System.String&gt;" />
        <Parameter Name="keywordFilter" Type="System.String" />
        <Parameter Name="visibilityFilter" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionVisibility" />
        <Parameter Name="contractVersionFilter" Type="System.UInt32" />
        <Parameter Name="includePrivateSessions" Type="System.Boolean" />
        <Parameter Name="includeReservations" Type="System.Boolean" />
        <Parameter Name="includeInactiveSessions" Type="System.Boolean" />
        <Parameter Name="maxItems" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">To be added.</param>
        <param name="sessionTemplateNameFilter">To be added.</param>
        <param name="xboxUserIdsFilter">To be added.</param>
        <param name="keywordFilter">To be added.</param>
        <param name="visibilityFilter">To be added.</param>
        <param name="contractVersionFilter">To be added.</param>
        <param name="includePrivateSessions">To be added.</param>
        <param name="includeReservations">To be added.</param>
        <param name="includeInactiveSessions">To be added.</param>
        <param name="maxItems">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplayerSessionChanged">
      <MemberSignature Language="C#" Value="public event Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionChangeEventArgs&gt; MultiplayerSessionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Windows.Foundation.EventHandler`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionChangeEventArgs&gt; MultiplayerSessionChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.MultiplayerSessionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultiplayerSessionChanged As EventHandler(Of MultiplayerSessionChangeEventArgs) " />
      <MemberSignature Language="F#" Value="member this.MultiplayerSessionChanged : Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionChangeEventArgs&gt; " Usage="member this.MultiplayerSessionChanged : Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.MultiplayerSessionChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Registers for multiplayer session change notifications.  Event handlers receive MultiplayerSessionChangeEventArgs^.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplayerSubscriptionLost">
      <MemberSignature Language="C#" Value="public event Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSubscriptionLostEventArgs&gt; MultiplayerSubscriptionLost;" />
      <MemberSignature Language="ILAsm" Value=".event class Windows.Foundation.EventHandler`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSubscriptionLostEventArgs&gt; MultiplayerSubscriptionLost" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.MultiplayerSubscriptionLost" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultiplayerSubscriptionLost As EventHandler(Of MultiplayerSubscriptionLostEventArgs) " />
      <MemberSignature Language="F#" Value="member this.MultiplayerSubscriptionLost : Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSubscriptionLostEventArgs&gt; " Usage="member this.MultiplayerSubscriptionLost : Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSubscriptionLostEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.MultiplayerSubscriptionLost</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSubscriptionLostEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Notification sent when a multiplayer connectivity via RTA is lost or stopped.
Event handlers receive Windows::Networking::Sockets::RealTimeActivityMultiplayerSubscriptionsLostEventArgs^.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplayerSubscriptionsEnabled">
      <MemberSignature Language="C#" Value="public bool MultiplayerSubscriptionsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiplayerSubscriptionsEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.MultiplayerSubscriptionsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MultiplayerSubscriptionsEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.MultiplayerSubscriptionsEnabled : bool" Usage="Microsoft.Xbox.Services.Multiplayer.MultiplayerService.MultiplayerSubscriptionsEnabled" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.MultiplayerSubscriptionsEnabled</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Indicates whether multiplayer subscriptions are currently enabled.  
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendInvitesAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;string&gt;&gt; SendInvitesAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference sessionReference, Windows.Foundation.Collections.IVectorView&lt;string&gt; xboxUserIds, uint titleId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;string&gt;&gt; SendInvitesAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference sessionReference, [in]class Windows.Foundation.Collections.IVectorView`1&lt;string&gt; xboxUserIds, [in]unsigned int32 titleId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.SendInvitesAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference,Windows.Foundation.Collections.IVectorView{System.String},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendInvitesAsync (sessionReference As MultiplayerSessionReference, xboxUserIds As IVectorView(Of String), titleId As UInteger) As IAsyncOperation(Of IVectorView(Of String))" />
      <MemberSignature Language="F#" Value="abstract member SendInvitesAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference * Windows.Foundation.Collections.IVectorView&lt;string&gt; * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;string&gt;&gt;&#xA;override this.SendInvitesAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference * Windows.Foundation.Collections.IVectorView&lt;string&gt; * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;string&gt;&gt;" Usage="multiplayerService.SendInvitesAsync (sessionReference, xboxUserIds, titleId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.SendInvitesAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference,Windows.Foundation.Collections.IVectorView{System.String},System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("SendInvitesAsync2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionReference" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference" />
        <Parameter Name="xboxUserIds" Type="Windows.Foundation.Collections.IVectorView&lt;System.String&gt;" />
        <Parameter Name="titleId" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="sessionReference">To be added.</param>
        <param name="xboxUserIds">To be added.</param>
        <param name="titleId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendInvitesAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;string&gt;&gt; SendInvitesAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference sessionReference, Windows.Foundation.Collections.IVectorView&lt;string&gt; xboxUserIds, uint titleId, string contextStringId, string activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Windows.Foundation.Collections.IVectorView`1&lt;string&gt;&gt; SendInvitesAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference sessionReference, [in]class Windows.Foundation.Collections.IVectorView`1&lt;string&gt; xboxUserIds, [in]unsigned int32 titleId, [in]string contextStringId, [in]string activationContext) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.SendInvitesAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference,Windows.Foundation.Collections.IVectorView{System.String},System.UInt32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendInvitesAsync (sessionReference As MultiplayerSessionReference, xboxUserIds As IVectorView(Of String), titleId As UInteger, contextStringId As String, activationContext As String) As IAsyncOperation(Of IVectorView(Of String))" />
      <MemberSignature Language="F#" Value="abstract member SendInvitesAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference * Windows.Foundation.Collections.IVectorView&lt;string&gt; * uint32 * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;string&gt;&gt;&#xA;override this.SendInvitesAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference * Windows.Foundation.Collections.IVectorView&lt;string&gt; * uint32 * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;string&gt;&gt;" Usage="multiplayerService.SendInvitesAsync (sessionReference, xboxUserIds, titleId, contextStringId, activationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.SendInvitesAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference,Windows.Foundation.Collections.IVectorView{System.String},System.UInt32,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("SendInvitesAsync1")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Windows.Foundation.Collections.IVectorView&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionReference" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference" />
        <Parameter Name="xboxUserIds" Type="Windows.Foundation.Collections.IVectorView&lt;System.String&gt;" />
        <Parameter Name="titleId" Type="System.UInt32" />
        <Parameter Name="contextStringId" Type="System.String" />
        <Parameter Name="activationContext" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sessionReference">To be added.</param>
        <param name="xboxUserIds">To be added.</param>
        <param name="titleId">To be added.</param>
        <param name="contextStringId">To be added.</param>
        <param name="activationContext">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActivityAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction SetActivityAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference sessionReference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncAction SetActivityAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference sessionReference) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.SetActivityAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetActivityAsync (sessionReference As MultiplayerSessionReference) As IAsyncAction" />
      <MemberSignature Language="F#" Value="abstract member SetActivityAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference -&gt; Windows.Foundation.IAsyncAction&#xA;override this.SetActivityAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference -&gt; Windows.Foundation.IAsyncAction" Usage="multiplayerService.SetActivityAsync sessionReference" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.SetActivityAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionReference" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference" />
      </Parameters>
      <Docs>
        <param name="sessionReference">A MultiplayerSessionReference for the session of the activity.</param>
        <summary>
Sets the passed session as the user's current activity, which will be displayed in Xbox 
dashboard user experiences (e.g. friends and gamercard) as associated with the currently 
running title.  If the session is joinable, it may also be displayed as joinable in those 
user experiences.
</summary>
        <returns>Returns an IAsyncAction object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncAction.Completed property.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSearchHandleAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction SetSearchHandleAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleRequest searchHandleRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncAction SetSearchHandleAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleRequest searchHandleRequest) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.SetSearchHandleAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetSearchHandleAsync (searchHandleRequest As MultiplayerSearchHandleRequest) As IAsyncAction" />
      <MemberSignature Language="F#" Value="abstract member SetSearchHandleAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleRequest -&gt; Windows.Foundation.IAsyncAction&#xA;override this.SetSearchHandleAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleRequest -&gt; Windows.Foundation.IAsyncAction" Usage="multiplayerService.SetSearchHandleAsync searchHandleRequest" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.SetSearchHandleAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleRequest)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchHandleRequest" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSearchHandleRequest" />
      </Parameters>
      <Docs>
        <param name="searchHandleRequest">A search handle request object for the associated session</param>
        <summary>
Creates a search handle associated with the session. The visibility of the session is dependent on its search handle. 
While you can create an searchable session, it is not queryable and visible to others unless you have the associated search handle committed as well. 
</summary>
        <returns>The async object for notifying when the operation is completed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTransferHandleAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;string&gt; SetTransferHandleAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference targetSessionReference, Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference originSessionReference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;string&gt; SetTransferHandleAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference targetSessionReference, [in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference originSessionReference) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.SetTransferHandleAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetTransferHandleAsync (targetSessionReference As MultiplayerSessionReference, originSessionReference As MultiplayerSessionReference) As IAsyncOperation(Of String)" />
      <MemberSignature Language="F#" Value="abstract member SetTransferHandleAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference -&gt; Windows.Foundation.IAsyncOperation&lt;string&gt;&#xA;override this.SetTransferHandleAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference -&gt; Windows.Foundation.IAsyncOperation&lt;string&gt;" Usage="multiplayerService.SetTransferHandleAsync (targetSessionReference, originSessionReference)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.SetTransferHandleAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetSessionReference" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference" />
        <Parameter Name="originSessionReference" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference" />
      </Parameters>
      <Docs>
        <param name="targetSessionReference">Target multiplayer_session_reference for the session you want to extend the access rights to.</param>
        <param name="originSessionReference">Origin multiplayer_session_reference for the session that grants access to the target session.</param>
        <summary>
Extends the access rights for the caller from the origin session to the target session.
For example, in a title with a lobby session and a game session, the title could put a transfer handle 
linking the lobby to the game inside the lobby session. Users invited to the lobby can use the handle to join the game session as well.
The transfer handle is deleted once the target session is deleted.
</summary>
        <returns>
Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is a string that contains the transfer handle ID.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteSessionAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt; TryWriteSessionAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSession multiplayerSession, Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode multiplayerSessionWriteMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt; TryWriteSessionAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSession multiplayerSession, [in]valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode multiplayerSessionWriteMode) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.TryWriteSessionAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSession,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode)" />
      <MemberSignature Language="F#" Value="abstract member TryWriteSessionAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSession * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt;&#xA;override this.TryWriteSessionAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSession * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt;" Usage="multiplayerService.TryWriteSessionAsync (multiplayerSession, multiplayerSessionWriteMode)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.TryWriteSessionAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSession,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiplayerSession" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSession" />
        <Parameter Name="multiplayerSessionWriteMode" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode" />
      </Parameters>
      <Docs>
        <param name="multiplayerSession">A MultiplayerSession object that has been modified with the changes to write.</param>
        <param name="multiplayerSessionWriteMode">An enumeration value indicating the type of write operation.</param>
        <summary>
Attempts to write a new or updated multiplayer session to the service.
The passed multiplayerSession must have a valid MultiplayerSessionReference set on it. The purpose of this method is to give the caller
additional details on the failure or success of the operation. 

This method returns a WriteSessionResult instead of throwing an exception, but only in cases where the write failed for a reason that is expected to occur 
during normal operation. 
</summary>
        <returns>Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is an object representing a WriteSessionResult object that contains the response returned from the server, 
a status with the result, as well as if the status was successful. The attributes in it may be different
from the attributes in the passed in MultiplayerSessionRequest object. 
</returns>
        <remarks>If you leave a session that you are the last member of, and the sessionEmptyTimeout is equal to 0, then the session is deleted immediately
and a nullptr is returned. 

Calls V105 PUT /serviceconfigs/{serviceConfigurationId}/sessionTemplates/{sessiontemplateName}/sessions/{sessionName}.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteSessionByHandleAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt; TryWriteSessionByHandleAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSession multiplayerSession, Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode multiplayerSessionWriteMode, string handleId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt; TryWriteSessionByHandleAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSession multiplayerSession, [in]valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode multiplayerSessionWriteMode, [in]string handleId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.TryWriteSessionByHandleAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSession,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode,System.String)" />
      <MemberSignature Language="F#" Value="abstract member TryWriteSessionByHandleAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSession * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt;&#xA;override this.TryWriteSessionByHandleAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSession * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt;" Usage="multiplayerService.TryWriteSessionByHandleAsync (multiplayerSession, multiplayerSessionWriteMode, handleId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.TryWriteSessionByHandleAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSession,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.WriteSessionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiplayerSession" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSession" />
        <Parameter Name="multiplayerSessionWriteMode" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode" />
        <Parameter Name="handleId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="multiplayerSession">A MultiplayerSession object that has been modified with the changes to write.</param>
        <param name="multiplayerSessionWriteMode">An enumeration value indicating the type of write operation.</param>
        <param name="handleId">To be added.</param>
        <summary>
Attempts to write a new or updated multiplayer session to the service, using the specified handle to the session.  
A handle is a service-side pointer to a session.  The handleid is a GUID identifier of the handle.  Callers will
usually get the handleid either from another player's MultiplayerActivityDetails, or from a protocol
activation after a user has accepted an invite.
The purpose of this method is to give the caller additional details on the failure or success. 

This method returns a WriteSessionResult instead of throwing an exception, but only in cases where the write failed for a reason that is expected to occur 
during normal operation. 
</summary>
        <returns>Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is an object representing a WriteSessionResult object that contains the response returned from the server,
a status with the result, as well as if the status was successful. The attributes in it may be different
from the attributes in the passed in MultiplayerSessionRequest object. </returns>
        <remarks>
Use this method only if your MultiplayerSession object doesn't have a MultiplayerSessionReference, as  
a handle's lifetime may be shorter than that of the session it points to.

If you leave a session that you are the last member of, and the sessionEmptyTimeout is equal to 0, then the session is deleted immediately
and a nullptr is returned. 

Calls V105 PUT /serviceconfigs/{serviceConfigurationId}/sessionTemplates/{sessiontemplateName}/sessions/{sessionName}</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSessionAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt; WriteSessionAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSession multiplayerSession, Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode multiplayerSessionWriteMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt; WriteSessionAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSession multiplayerSession, [in]valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode multiplayerSessionWriteMode) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.WriteSessionAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSession,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode)" />
      <MemberSignature Language="F#" Value="abstract member WriteSessionAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSession * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;&#xA;override this.WriteSessionAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSession * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;" Usage="multiplayerService.WriteSessionAsync (multiplayerSession, multiplayerSessionWriteMode)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.WriteSessionAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSession,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiplayerSession" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSession" />
        <Parameter Name="multiplayerSessionWriteMode" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode" />
      </Parameters>
      <Docs>
        <param name="multiplayerSession">A MultiplayerSession object that has been modified with the changes to write.</param>
        <param name="multiplayerSessionWriteMode">An enumeration value indicating the type of write operation.</param>
        <summary>
Writes a new or updated multiplayer session to the multiplayer service.
</summary>
        <returns>Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is a MultiplayerSession object containing the response returned from the server.
The attributes in it might be different from the attributes in the passed-in MultiplayerSession object. </returns>
        <remarks>Calls V102 PUT /serviceconfigs/{serviceConfigurationId}/sessionTemplates/{sessiontemplateName}/sessions/{sessionName}.

If your client needs to pass a handle ID when writing the session, it should call the MultiplayerService.WriteSessionByHandleAsync Method.

If the client calls the MultiplayerSession.Leave Method for the last member of the session, when the session is 
using a sessionEmptyTimeout value of 0, the session is deleted immediately. After the call to MultiplayerSession.Leave, 
the client calls WriteSessionAsync to write local changes. This call returns a null pointer with an HTTP/204 status code, 
since the session has been deleted. 
</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteSessionByHandleAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt; WriteSessionByHandleAsync (Microsoft.Xbox.Services.Multiplayer.MultiplayerSession multiplayerSession, Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode multiplayerSessionWriteMode, string handleId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt; WriteSessionByHandleAsync([in]class Microsoft.Xbox.Services.Multiplayer.MultiplayerSession multiplayerSession, [in]valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode multiplayerSessionWriteMode, [in]string handleId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.MultiplayerService.WriteSessionByHandleAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSession,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode,System.String)" />
      <MemberSignature Language="F#" Value="abstract member WriteSessionByHandleAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSession * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;&#xA;override this.WriteSessionByHandleAsync : Microsoft.Xbox.Services.Multiplayer.MultiplayerSession * Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;" Usage="multiplayerService.WriteSessionByHandleAsync (multiplayerSession, multiplayerSessionWriteMode, handleId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.__IMultiplayerServicePublicNonVirtuals.WriteSessionByHandleAsync(Microsoft.Xbox.Services.Multiplayer.MultiplayerSession,Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Multiplayer.MultiplayerSession&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multiplayerSession" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSession" />
        <Parameter Name="multiplayerSessionWriteMode" Type="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode" />
        <Parameter Name="handleId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="multiplayerSession">A MultiplayerSession object that has been modified with the changes to write.</param>
        <param name="multiplayerSessionWriteMode">An enumeration value indicating the type of write operation.</param>
        <param name="handleId">The ID (GUID) of the handle that should be used when writing the session.</param>
        <summary>
Writes a new or updated multiplayer session to the service, using the specified handle to the session.  
A handle is a service-side pointer to a session.  The handleid is a GUID identifier of the handle.  Callers will
usually get the handleid either from another player's MultiplayerActivityDetails, or from a protocol
activation after a user has accepted an invite.
</summary>
        <returns>Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the IAsyncOperation&lt;TResult&gt;.Completed property.
When the asynchronous operation is complete, the result of the operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

The result is an object representing the new or updated MultiplayerSession object that contains the response returned from the server.
The returned MultiplayerSession contains a MultiplayerSessionReference, so it can be used when calling WriteSessionAsync.
</returns>
        <remarks>
Use this method only if your MultiplayerSession object doesn't have a MultiplayerSessionReference, as  
a handle's lifetime may be shorter than that of the session it points to.

Calls V105 PUT /handles/{handleid}/session.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>