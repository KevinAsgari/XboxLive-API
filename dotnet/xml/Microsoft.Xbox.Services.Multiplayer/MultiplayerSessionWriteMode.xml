<Type Name="MultiplayerSessionWriteMode" FullName="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode">
  <TypeSignature Language="C#" Value="public enum MultiplayerSessionWriteMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MultiplayerSessionWriteMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum MultiplayerSessionWriteMode" />
  <TypeSignature Language="F#" Value="type MultiplayerSessionWriteMode = " />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Defines values used to indicate modes in MultiplayerService.WriteSessionAsync calls.
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateNew">
      <MemberSignature Language="C#" Value="CreateNew" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode CreateNew = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode.CreateNew" />
      <MemberSignature Language="VB.NET" Value="CreateNew" />
      <MemberSignature Language="F#" Value="CreateNew = 0" Usage="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode.CreateNew" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
Create a new multiplayer session.  Fails with HTTP_E_STATUS_PRECOND_FAILED if the session already exists.
</summary>
      </Docs>
    </Member>
    <Member MemberName="SynchronizedUpdate">
      <MemberSignature Language="C#" Value="SynchronizedUpdate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode SynchronizedUpdate = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode.SynchronizedUpdate" />
      <MemberSignature Language="VB.NET" Value="SynchronizedUpdate" />
      <MemberSignature Language="F#" Value="SynchronizedUpdate = 3" Usage="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode.SynchronizedUpdate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
Updates an existing multiplayer session to resolve any conflict between two devices trying to perform an operation
at the same time. Fails with HTTP_E_STATUS_PRECOND_FAILED (HTTP status 412) if eTag on the local session doesn't match 
the eTag on the server. Fails with the same error code if the session does not exist.
</summary>
      </Docs>
    </Member>
    <Member MemberName="UpdateExisting">
      <MemberSignature Language="C#" Value="UpdateExisting" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode UpdateExisting = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode.UpdateExisting" />
      <MemberSignature Language="VB.NET" Value="UpdateExisting" />
      <MemberSignature Language="F#" Value="UpdateExisting = 2" Usage="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode.UpdateExisting" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
Updates an existing multiplayer session.  Fails with HTTP_E_STATUS_PRECOND_FAILED if the session doesn't exist.
</summary>
      </Docs>
    </Member>
    <Member MemberName="UpdateOrCreateNew">
      <MemberSignature Language="C#" Value="UpdateOrCreateNew" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode UpdateOrCreateNew = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode.UpdateOrCreateNew" />
      <MemberSignature Language="VB.NET" Value="UpdateOrCreateNew" />
      <MemberSignature Language="F#" Value="UpdateOrCreateNew = 1" Usage="Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode.UpdateOrCreateNew" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionWriteMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
Either update or create a new session. It doesn't matter whether the session exists or not.
</summary>
      </Docs>
    </Member>
  </Members>
</Type>