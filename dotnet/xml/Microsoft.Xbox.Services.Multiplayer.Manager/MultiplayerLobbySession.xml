<Type Name="MultiplayerLobbySession" FullName="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession">
  <TypeSignature Language="C#" Value="public sealed class MultiplayerLobbySession" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MultiplayerLobbySession extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MultiplayerLobbySession" />
  <TypeSignature Language="F#" Value="type MultiplayerLobbySession = class&#xA;    interface __IMultiplayerLobbySessionPublicNonVirtuals" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Represents a multiplayer lobby. This is also where you manage members that are local to this device.
There are two game objects when using a multiplayer manager.
One represents the LobbySession() which is where friends you invite will join.
Another is the GameSession() which contains people that your lobby has been matched with.
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddLocalUser">
      <MemberSignature Language="C#" Value="public void AddLocalUser (Microsoft.Xbox.Services.System.XboxLiveUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLocalUser([in]class Microsoft.Xbox.Services.System.XboxLiveUser user) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.AddLocalUser(Microsoft.Xbox.Services.System.XboxLiveUser)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLocalUser (user As XboxLiveUser)" />
      <MemberSignature Language="F#" Value="abstract member AddLocalUser : Microsoft.Xbox.Services.System.XboxLiveUser -&gt; unit&#xA;override this.AddLocalUser : Microsoft.Xbox.Services.System.XboxLiveUser -&gt; unit" Usage="multiplayerLobbySession.AddLocalUser user" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.AddLocalUser(Microsoft.Xbox.Services.System.XboxLiveUser)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
      </Parameters>
      <Docs>
        <param name="user">The associated XboxLiveContext for the User.</param>
        <summary>
Hosts a new lobby when the first user is added. Any additional users are added to the existing lobby
</summary>
        <remarks>
Changes are batched and written to the service on the next DoWork(). All session properties and members
contain updated response returned from the server upon calling DoWork().

You can send invites, set lobby properties, and access lobby members only once you've added the local user.
While joining a lobby via an invite, or a HandleId, you can skip adding the local user to avoid creating a lobby and
instead pass in the list of users in the JoinLobby() API.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrelationId">
      <MemberSignature Language="C#" Value="public string CorrelationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CorrelationId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.CorrelationId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CorrelationId As String" />
      <MemberSignature Language="F#" Value="member this.CorrelationId : string" Usage="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.CorrelationId" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.CorrelationId</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
A unique ID to the session used to query trace logs for entries that relate to the session.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLocalMemberProperties">
      <MemberSignature Language="C#" Value="public void DeleteLocalMemberProperties (Microsoft.Xbox.Services.System.XboxLiveUser user, string name, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteLocalMemberProperties([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]string name, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.DeleteLocalMemberProperties(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteLocalMemberProperties (user As XboxLiveUser, name As String, context As Object)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLocalMemberProperties : Microsoft.Xbox.Services.System.XboxLiveUser * string * obj -&gt; unit&#xA;override this.DeleteLocalMemberProperties : Microsoft.Xbox.Services.System.XboxLiveUser * string * obj -&gt; unit" Usage="multiplayerLobbySession.DeleteLocalMemberProperties (user, name, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.DeleteLocalMemberProperties(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="user">The associated XboxLiveContext for the User you want to delete the property for.</param>
        <param name="name">The name of the property to delete.</param>
        <param name="context">The application-defined data to correlate the MultiplayerEvent to the initiating call. (Optional)</param>
        <summary>
Delete a custom property on the local member.
</summary>
        <remarks>
Changes are batched and written to the service on the next DoWork(). All session properties and members
contain updated response returned from the server upon calling DoWork().
</remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember Host { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember Host" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Host" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Host As MultiplayerMember" />
      <MemberSignature Language="F#" Value="member this.Host : Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember" Usage="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Host" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.Host</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Returns the host member for the lobby.
There can be multiple hosts if there are multiple users on the same host device.
This returns the user with the lowest index for that host device.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InviteFriends">
      <MemberSignature Language="C#" Value="public void InviteFriends (Microsoft.Xbox.Services.System.XboxLiveUser user, string contextStringId, string customActivationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InviteFriends([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]string contextStringId, [in]string customActivationContext) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.InviteFriends(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InviteFriends (user As XboxLiveUser, contextStringId As String, customActivationContext As String)" />
      <MemberSignature Language="F#" Value="abstract member InviteFriends : Microsoft.Xbox.Services.System.XboxLiveUser * string * string -&gt; unit&#xA;override this.InviteFriends : Microsoft.Xbox.Services.System.XboxLiveUser * string * string -&gt; unit" Usage="multiplayerLobbySession.InviteFriends (user, contextStringId, customActivationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.InviteFriends(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="contextStringId" Type="System.String" />
        <Parameter Name="customActivationContext" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The associated XboxLiveContext for the User.</param>
        <param name="contextStringId">The custom context string ID.  This string ID is defined
during Xbox Live ingestion to identify the invitation text that is additional to the standard
invitation text. The ID string must be prefixed with "///".  Pass an empty string if
you don't want a custom string added to the invite.</param>
        <param name="customActivationContext">The activation context string. Pass an empty string if
you don't want a custom context added to the invite.</param>
        <summary>
Displays the invite UI and allows the user to select people from the user's people list and invite them to join the user's party
If a user accepts that notification the title will be activated.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InviteUsers">
      <MemberSignature Language="C#" Value="public void InviteUsers (Microsoft.Xbox.Services.System.XboxLiveUser user, Windows.Foundation.Collections.IVectorView&lt;string&gt; xboxUserIds, string contextStringId, string customActivationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InviteUsers([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]class Windows.Foundation.Collections.IVectorView`1&lt;string&gt; xboxUserIds, [in]string contextStringId, [in]string customActivationContext) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.InviteUsers(Microsoft.Xbox.Services.System.XboxLiveUser,Windows.Foundation.Collections.IVectorView{System.String},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InviteUsers (user As XboxLiveUser, xboxUserIds As IVectorView(Of String), contextStringId As String, customActivationContext As String)" />
      <MemberSignature Language="F#" Value="abstract member InviteUsers : Microsoft.Xbox.Services.System.XboxLiveUser * Windows.Foundation.Collections.IVectorView&lt;string&gt; * string * string -&gt; unit&#xA;override this.InviteUsers : Microsoft.Xbox.Services.System.XboxLiveUser * Windows.Foundation.Collections.IVectorView&lt;string&gt; * string * string -&gt; unit" Usage="multiplayerLobbySession.InviteUsers (user, xboxUserIds, contextStringId, customActivationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.InviteUsers(Microsoft.Xbox.Services.System.XboxLiveUser,Windows.Foundation.Collections.IVectorView{System.String},System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="xboxUserIds" Type="Windows.Foundation.Collections.IVectorView&lt;System.String&gt;" />
        <Parameter Name="contextStringId" Type="System.String" />
        <Parameter Name="customActivationContext" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">To be added.</param>
        <param name="xboxUserIds">To be added.</param>
        <param name="contextStringId">To be added.</param>
        <param name="customActivationContext">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHost">
      <MemberSignature Language="C#" Value="public bool IsHost (string xboxUserId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHost([in]string xboxUserId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.IsHost(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsHost (xboxUserId As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsHost : string -&gt; bool&#xA;override this.IsHost : string -&gt; bool" Usage="multiplayerLobbySession.IsHost xboxUserId" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.IsHost(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xboxUserId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xboxUserId">The Xbox User ID of the user</param>
        <summary>
Indicates if the Xbox User ID is the host.
</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastTournamentTeamResult">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Tournaments.TournamentTeamResult LastTournamentTeamResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Xbox.Services.Tournaments.TournamentTeamResult LastTournamentTeamResult" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.LastTournamentTeamResult" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastTournamentTeamResult As TournamentTeamResult" />
      <MemberSignature Language="F#" Value="member this.LastTournamentTeamResult : Microsoft.Xbox.Services.Tournaments.TournamentTeamResult" Usage="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.LastTournamentTeamResult" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.LastTournamentTeamResult</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Tournaments.TournamentTeamResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Only applicable if you are using Xbox Live Tournaments.
The known last team result of the tournament.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalMembers">
      <MemberSignature Language="C#" Value="public Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt; LocalMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt; LocalMembers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.LocalMembers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalMembers As IVectorView(Of MultiplayerMember)" />
      <MemberSignature Language="F#" Value="member this.LocalMembers : Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt;" Usage="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.LocalMembers" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.LocalMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
A collection of members that are local to this device.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt; Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt; Members" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As IVectorView(Of MultiplayerMember)" />
      <MemberSignature Language="F#" Value="member this.Members : Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt;" Usage="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Members" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.Members</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
A collection of members that are in the lobby. When a friend accepts a game invite,
members will be added to the lobby.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public string Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As String" />
      <MemberSignature Language="F#" Value="member this.Properties : string" Usage="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Properties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.Properties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
JSON string that specify the custom properties for the game.  These can be changed anytime.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLocalUser">
      <MemberSignature Language="C#" Value="public void RemoveLocalUser (Microsoft.Xbox.Services.System.XboxLiveUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLocalUser([in]class Microsoft.Xbox.Services.System.XboxLiveUser user) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.RemoveLocalUser(Microsoft.Xbox.Services.System.XboxLiveUser)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveLocalUser (user As XboxLiveUser)" />
      <MemberSignature Language="F#" Value="abstract member RemoveLocalUser : Microsoft.Xbox.Services.System.XboxLiveUser -&gt; unit&#xA;override this.RemoveLocalUser : Microsoft.Xbox.Services.System.XboxLiveUser -&gt; unit" Usage="multiplayerLobbySession.RemoveLocalUser user" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.RemoveLocalUser(Microsoft.Xbox.Services.System.XboxLiveUser)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
      </Parameters>
      <Docs>
        <param name="user">The associated XboxLiveContext for the User.</param>
        <summary>
Removes the local user from the lobby and game session.
After this method is called, if no local users are active, title will not be able to perform any further multiplayer operations.
You can join another game or re-add the local user.
</summary>
        <remarks>
Changes are batched and written to the service on the next DoWork(). All session properties and members
contain updated response returned from the server upon calling DoWork().
</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionConstants">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionConstants SessionConstants { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionConstants SessionConstants" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SessionConstants" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionConstants As MultiplayerSessionConstants" />
      <MemberSignature Language="F#" Value="member this.SessionConstants : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionConstants" Usage="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SessionConstants" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.SessionConstants</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionConstants</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
A set of constants associated with this session. These can only be set through the session template.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionReference">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference SessionReference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference SessionReference" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SessionReference" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionReference As MultiplayerSessionReference" />
      <MemberSignature Language="F#" Value="member this.SessionReference : Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference" Usage="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SessionReference" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.SessionReference</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Object containing identifying information for the session.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalMemberConnectionAddress">
      <MemberSignature Language="C#" Value="public void SetLocalMemberConnectionAddress (Microsoft.Xbox.Services.System.XboxLiveUser user, string connectionAddress, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocalMemberConnectionAddress([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]string connectionAddress, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetLocalMemberConnectionAddress(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalMemberConnectionAddress (user As XboxLiveUser, connectionAddress As String, context As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetLocalMemberConnectionAddress : Microsoft.Xbox.Services.System.XboxLiveUser * string * obj -&gt; unit&#xA;override this.SetLocalMemberConnectionAddress : Microsoft.Xbox.Services.System.XboxLiveUser * string * obj -&gt; unit" Usage="multiplayerLobbySession.SetLocalMemberConnectionAddress (user, connectionAddress, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.SetLocalMemberConnectionAddress(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="connectionAddress" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="user">The associated system User you want to set the property for.</param>
        <param name="connectionAddress">The network connection address to set.</param>
        <param name="context">The application-defined data to correlate the MultiplayerEvent to the initiating call. (Optional)</param>
        <summary>
Set the connection address for the local member. The address can be used for network and secure socket connections.
</summary>
        <remarks>
Changes are batched and written to the service on the next DoWork(). All session properties and members
contain updated response returned from the server upon calling DoWork().
</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalMemberProperties">
      <MemberSignature Language="C#" Value="public void SetLocalMemberProperties (Microsoft.Xbox.Services.System.XboxLiveUser user, string name, string valueJson, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocalMemberProperties([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]string name, [in]string valueJson, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetLocalMemberProperties(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalMemberProperties (user As XboxLiveUser, name As String, valueJson As String, context As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetLocalMemberProperties : Microsoft.Xbox.Services.System.XboxLiveUser * string * string * obj -&gt; unit&#xA;override this.SetLocalMemberProperties : Microsoft.Xbox.Services.System.XboxLiveUser * string * string * obj -&gt; unit" Usage="multiplayerLobbySession.SetLocalMemberProperties (user, name, valueJson, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.SetLocalMemberProperties(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="valueJson" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="user">The associated XboxLiveContext for the User you want to set the property for.</param>
        <param name="name">The name of the property to set.</param>
        <param name="valueJson">The JSON value to assign to the property. (Optional)</param>
        <param name="context">The application-defined data to correlate the MultiplayerEvent to the initiating call. (Optional)</param>
        <summary>
Set a custom property on the local member to the specified JSON string.
</summary>
        <remarks>
Changes are batched and written to the service on the next DoWork(). All session properties and members
contain updated response returned from the server upon calling DoWork().
</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperties">
      <MemberSignature Language="C#" Value="public void SetProperties (string name, string valueJson, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProperties([in]string name, [in]string valueJson, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetProperties(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProperties (name As String, valueJson As String, context As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetProperties : string * string * obj -&gt; unit&#xA;override this.SetProperties : string * string * obj -&gt; unit" Usage="multiplayerLobbySession.SetProperties (name, valueJson, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.SetProperties(System.String,System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="valueJson" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to set.</param>
        <param name="valueJson">The JSON value to assign to the property. (Optional)</param>
        <param name="context">The application-defined data to correlate the MultiplayerEvent to the initiating call. (Optional)</param>
        <summary>
Set a custom game property to the specified JSON string.
</summary>
        <remarks>
Changes are batched and written to the service on the next DoWork(). All session properties and members
contain updated response returned from the server upon calling DoWork().
</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSynchronizedHost">
      <MemberSignature Language="C#" Value="public void SetSynchronizedHost (Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember gameHost, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSynchronizedHost([in]class Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember gameHost, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetSynchronizedHost(Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSynchronizedHost (gameHost As MultiplayerMember, context As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetSynchronizedHost : Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember * obj -&gt; unit&#xA;override this.SetSynchronizedHost : Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember * obj -&gt; unit" Usage="multiplayerLobbySession.SetSynchronizedHost (gameHost, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.SetSynchronizedHost(Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameHost" Type="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="gameHost">The host member.</param>
        <param name="context">The application-defined data to correlate the MultiplayerEvent to the initiating call. (Optional)</param>
        <summary>
Sets the host for the game using multiplayer_session_write_mode::synchronized_update. 
</summary>
        <remarks>
Use this method to resolve any conflicts between devices trying to set the host at the same time.
It ensures that updates to the session are atomic.

The service may reject your request if a race condition occurred(due to a conflict) resulting in ErrorCode
http_status_412_precondition_failed (HTTP status 412). To resolve this, evaluate the need to write again and re-submit if needed.

The result is delivered via MultiplayerEvent callback of type WriteSynchronizedHostCompleted through DoWork().
</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSynchronizedProperties">
      <MemberSignature Language="C#" Value="public void SetSynchronizedProperties (string name, string valueJson, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSynchronizedProperties([in]string name, [in]string valueJson, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetSynchronizedProperties(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSynchronizedProperties (name As String, valueJson As String, context As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetSynchronizedProperties : string * string * obj -&gt; unit&#xA;override this.SetSynchronizedProperties : string * string * obj -&gt; unit" Usage="multiplayerLobbySession.SetSynchronizedProperties (name, valueJson, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Multiplayer.Manager.__IMultiplayerLobbySessionPublicNonVirtuals.SetSynchronizedProperties(System.String,System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="valueJson" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to set.</param>
        <param name="valueJson">The JSON value to assign to the property. (Optional)</param>
        <param name="context">The application-defined data to correlate the MultiplayerEvent to the initiating call. (Optional)</param>
        <summary>
Sets a custom property to the specified JSON string using MultiplayerSessionWriteMode::SynchronizedUpdate.
</summary>
        <remarks>
Use this method to resolve any conflicts between devices while trying to set properties to a shared portion that other
devices can also modify. It ensures that updates to the session are atomic. If writing to non-sharable properties, use SetProperties() instead.

The service may reject your request if a race condition occurred (due to a conflict) resulting in ErrorCode
http_status_412_precondition_failed (HTTP status 412). To resolve this, evaluate the need to write again and re-submit if needed.

The result is delivered via MultiplayerEvent callback of type WriteSynchronizedPropertiesCompleted through DoWork().
</remarks>
      </Docs>
    </Member>
  </Members>
</Type>