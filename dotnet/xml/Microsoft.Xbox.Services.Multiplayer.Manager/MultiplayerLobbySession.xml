<Type Name="MultiplayerLobbySession" FullName="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession">
  <TypeSignature Language="C#" Value="public sealed class MultiplayerLobbySession" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MultiplayerLobbySession extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Manager for managing members that are local to this device.
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddLocalUser">
      <MemberSignature Language="C#" Value="public void AddLocalUser (Microsoft.Xbox.Services.System.XboxLiveUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLocalUser([in]class Microsoft.Xbox.Services.System.XboxLiveUser user) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.AddLocalUser(Microsoft.Xbox.Services.System.XboxLiveUser)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
      </Parameters>
      <Docs>
        <param name="user">The associated xbox_live_context for the User.</param>
        <summary>
Changes are batched and written to the service on the next do_work(). All session properties and members
contain updated response returned from the server upon calling do_work().
Hosts a new lobby when the first user is added. For all other users, they will be added to the existing lobby
You can send invites, set lobby properties, access lobby members via lobby() only once you've added the local user.
While joining a lobby via an invite, or a handleId, you can skip adding the local user to avoid creating a lobby and 
instead pass in the list of users in the join_lobby() API.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrelationId">
      <MemberSignature Language="C#" Value="public string CorrelationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CorrelationId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.CorrelationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
A unique ID to the session used to query trace logs for entries that relate to the session.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLocalMemberProperties">
      <MemberSignature Language="C#" Value="public void DeleteLocalMemberProperties (Microsoft.Xbox.Services.System.XboxLiveUser user, string name, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteLocalMemberProperties([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]string name, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.DeleteLocalMemberProperties(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="user">The associated xbox_live_context for the User you want to delete the property for.</param>
        <param name="name">The name of the property to delete</param>
        <param name="context">To be added.</param>
        <summary>
Delete a custom property on the local member
Changes are batched and written to the service on the next do_work(). All session properties and members
contain updated response returned from the server upon calling do_work().
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember Host { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember Host" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Returns the host member for the lobby.
There could be multiple hosts if there are multiple users on the same host device.
This returns user with the lowest index for that host device.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InviteFriends">
      <MemberSignature Language="C#" Value="public void InviteFriends (Microsoft.Xbox.Services.System.XboxLiveUser user, string contextStringId, string customActivationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InviteFriends([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]string contextStringId, [in]string customActivationContext) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.InviteFriends(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="contextStringId" Type="System.String" />
        <Parameter Name="customActivationContext" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The associated xbox_live_context for the User.</param>
        <param name="contextStringId">The custom context string ID.  This string ID is defined 
during Xbox Live ingestion to identify the invitation text that is additional to the standard 
invitation text. The ID string must be prefixed with "///".  Pass an empty string if 
you don't want a custom string added to the invite.</param>
        <param name="customActivationContext">The activation context string. Pass an empty string if 
you don't want a custom context added to the invite.</param>
        <summary>
Displays the invite UI and allows the user to select people from the user's people list and invite them to join the user's party
If a user accepts that notification the title will be activated.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InviteUsers">
      <MemberSignature Language="C#" Value="public void InviteUsers (Microsoft.Xbox.Services.System.XboxLiveUser user, Windows.Foundation.Collections.IVectorView&lt;string&gt; xboxUserIds, string contextStringId, string customActivationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InviteUsers([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]class Windows.Foundation.Collections.IVectorView`1&lt;string&gt; xboxUserIds, [in]string contextStringId, [in]string customActivationContext) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.InviteUsers(Microsoft.Xbox.Services.System.XboxLiveUser,Windows.Foundation.Collections.IVectorView{System.String},System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="xboxUserIds" Type="Windows.Foundation.Collections.IVectorView&lt;System.String&gt;" />
        <Parameter Name="contextStringId" Type="System.String" />
        <Parameter Name="customActivationContext" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">To be added.</param>
        <param name="xboxUserIds">To be added.</param>
        <param name="contextStringId">To be added.</param>
        <param name="customActivationContext">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHost">
      <MemberSignature Language="C#" Value="public bool IsHost (string xboxUserId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsHost([in]string xboxUserId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.IsHost(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xboxUserId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xboxUserId">The Xbox User ID of the user</param>
        <summary>
Whether or not the Xbox User ID is the host.
</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastTournamentTeamResult">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Tournaments.TournamentTeamResult LastTournamentTeamResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Xbox.Services.Tournaments.TournamentTeamResult LastTournamentTeamResult" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.LastTournamentTeamResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Tournaments.TournamentTeamResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Only applicable if you are using Xbox Live Tournaments.
The known last team result of the tournament.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalMembers">
      <MemberSignature Language="C#" Value="public Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt; LocalMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt; LocalMembers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.LocalMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
A collection of members that are local to this device.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt; Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Windows.Foundation.Collections.IVectorView`1&lt;class Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt; Members" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Members" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.Collections.IVectorView&lt;Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
A collection of members that are in the lobby. When a friend accepts a game invite, 
members will be added to the lobby.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public string Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
JSON string that specify the custom properties for the game.  These can be changed anytime.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLocalUser">
      <MemberSignature Language="C#" Value="public void RemoveLocalUser (Microsoft.Xbox.Services.System.XboxLiveUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLocalUser([in]class Microsoft.Xbox.Services.System.XboxLiveUser user) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.RemoveLocalUser(Microsoft.Xbox.Services.System.XboxLiveUser)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
      </Parameters>
      <Docs>
        <param name="user">The associated xbox_live_context for the User.</param>
        <summary>
Changes are batched and written to the service on the next do_work(). All session properties and members
contain updated response returned from the server upon calling do_work().
Removes the local user from the lobby and game session.
After this method is called, if no local users are active, title will not be able to perform any further multiplayer operations.
You can join another game or re-add the local user.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionConstants">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionConstants SessionConstants { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionConstants SessionConstants" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SessionConstants" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionConstants</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
A set of constants associated with this session. These can only be set through the session template.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionReference">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference SessionReference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference SessionReference" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SessionReference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Object containing identifying information for the session.
</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalMemberConnectionAddress">
      <MemberSignature Language="C#" Value="public void SetLocalMemberConnectionAddress (Microsoft.Xbox.Services.System.XboxLiveUser user, string connectionAddress, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocalMemberConnectionAddress([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]string connectionAddress, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetLocalMemberConnectionAddress(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="connectionAddress" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="user">The associated system User you want to set the property for.</param>
        <param name="connectionAddress">The network connection address to set.</param>
        <param name="context">To be added.</param>
        <summary>
Set connection address for the local member. The address can be used for network and secure socket connection.
Changes are batched and written to the service on the next do_work(). All session properties and members
contain updated response returned from the server upon calling do_work().
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalMemberProperties">
      <MemberSignature Language="C#" Value="public void SetLocalMemberProperties (Microsoft.Xbox.Services.System.XboxLiveUser user, string name, string valueJson, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocalMemberProperties([in]class Microsoft.Xbox.Services.System.XboxLiveUser user, [in]string name, [in]string valueJson, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetLocalMemberProperties(Microsoft.Xbox.Services.System.XboxLiveUser,System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Xbox.Services.System.XboxLiveUser" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="valueJson" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="user">The associated xbox_live_context for the User you want to set the property for.</param>
        <param name="name">The name of the property to set.</param>
        <param name="valueJson">The JSON value to assign to the property. (Optional)</param>
        <param name="context">To be added.</param>
        <summary>
Set a custom property on the local member to the specified JSON string
Changes are batched and written to the service on the next do_work(). All session properties and members
contain updated response returned from the server upon calling do_work().
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperties">
      <MemberSignature Language="C#" Value="public void SetProperties (string name, string valueJson, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProperties([in]string name, [in]string valueJson, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetProperties(System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="valueJson" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to set.</param>
        <param name="valueJson">The JSON value to assign to the property. (Optional)</param>
        <param name="context">To be added.</param>
        <summary>
Set a custom game property to the specified JSON string.
Changes are batched and written to the service on the next do_work(). All session properties and members
contain updated response returned from the server upon calling do_work().
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSynchronizedHost">
      <MemberSignature Language="C#" Value="public void SetSynchronizedHost (Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember gameHost, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSynchronizedHost([in]class Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember gameHost, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetSynchronizedHost(Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameHost" Type="Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerMember" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="gameHost">The host member.</param>
        <param name="context">To be added.</param>
        <summary>
Sets the host for the game using multiplayer_session_write_mode::synchronized_update. Use this method to resolve
any conflicts between devices trying to set the host at the same time. It ensures that updates to the session are atomic. 
The service may reject your request if a race condition occurred(due to a conflict) resulting in error_code
http_status_412_precondition_failed (HTTP status 412). To resolve this, evaluate the need to write again and re-submit if needed.
The result is delivered via multiplayer_event callback of type write_synchronized_host_completed through do_work().
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSynchronizedProperties">
      <MemberSignature Language="C#" Value="public void SetSynchronizedProperties (string name, string valueJson, object context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSynchronizedProperties([in]string name, [in]string valueJson, [in]object context) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Multiplayer.Manager.MultiplayerLobbySession.SetSynchronizedProperties(System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="valueJson" Type="System.String" />
        <Parameter Name="context" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name of the property to set.</param>
        <param name="valueJson">The JSON value to assign to the property. (Optional)</param>
        <param name="context">To be added.</param>
        <summary>
Sets a custom property to the specified JSON string using multiplayer_session_write_mode::synchronized_update.
Use this method to resolve any conflicts between devices while trying to set properties to a shared portion that other 
devices can also modify. It ensures that updates to the session are atomic. If writing to non-sharable properties, use set_properties() instead.
The service may reject your request if a race condition occurred (due to a conflict) resulting in error_code 
http_status_412_precondition_failed (HTTP status 412). To resolve this, evaluate the need to write again and re-submit if needed.
The result is delivered via multiplayer_event callback of type write_synchronized_properties_completed through do_work().
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
