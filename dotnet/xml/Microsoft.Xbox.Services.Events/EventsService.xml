<Type Name="EventsService" FullName="Microsoft.Xbox.Services.Events.EventsService">
  <TypeSignature Language="C#" Value="public sealed class EventsService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventsService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.Events.EventsService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventsService" />
  <TypeSignature Language="F#" Value="type EventsService = class&#xA;    interface __IEventsServicePublicNonVirtuals" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Represents a service class that provides APIs that you can use to write in-game events
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="WriteInGameEvent">
      <MemberSignature Language="C#" Value="public void WriteInGameEvent (string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteInGameEvent([in]string eventName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Events.EventsService.WriteInGameEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteInGameEvent (eventName As String)" />
      <MemberSignature Language="F#" Value="abstract member WriteInGameEvent : string -&gt; unit&#xA;override this.WriteInGameEvent : string -&gt; unit" Usage="eventsService.WriteInGameEvent eventName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Events.__IEventsServicePublicNonVirtuals.WriteInGameEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("WriteInGameEvent2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventName">Event name</param>
        <summary>
Write a simple in-game event without providing any data fields.
</summary>
        <remarks>
The name of the event must match the event name declared in the title's service configuration.
The names are case insensitive.
If the API writes an event with a name that does not match a name in the service configuration, the
service drops the event with no notification.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteInGameEvent">
      <MemberSignature Language="C#" Value="public void WriteInGameEvent (string eventName, Windows.Foundation.Collections.PropertySet dimensions, Windows.Foundation.Collections.PropertySet measurements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteInGameEvent([in]string eventName, [in]class Windows.Foundation.Collections.PropertySet dimensions, [in]class Windows.Foundation.Collections.PropertySet measurements) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Events.EventsService.WriteInGameEvent(System.String,Windows.Foundation.Collections.PropertySet,Windows.Foundation.Collections.PropertySet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteInGameEvent (eventName As String, dimensions As PropertySet, measurements As PropertySet)" />
      <MemberSignature Language="F#" Value="abstract member WriteInGameEvent : string * Windows.Foundation.Collections.PropertySet * Windows.Foundation.Collections.PropertySet -&gt; unit&#xA;override this.WriteInGameEvent : string * Windows.Foundation.Collections.PropertySet * Windows.Foundation.Collections.PropertySet -&gt; unit" Usage="eventsService.WriteInGameEvent (eventName, dimensions, measurements)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Events.__IEventsServicePublicNonVirtuals.WriteInGameEvent(System.String,Windows.Foundation.Collections.PropertySet,Windows.Foundation.Collections.PropertySet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("WriteInGameEvent1")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="dimensions" Type="Windows.Foundation.Collections.PropertySet" />
        <Parameter Name="measurements" Type="Windows.Foundation.Collections.PropertySet" />
      </Parameters>
      <Docs>
        <param name="eventName">Event name</param>
        <param name="dimensions">Dimension data fields</param>
        <param name="measurements">Measurement data fields</param>
        <summary>
Write an in-game event that includes "dimension" and "measurement" data fields.

Dimensions include event fields with a finite number of defined numeric or string values.
Examples of dimensions: map id, difficulty level, character or weapon class, game mode, boolean settings, etc.

Measurements include event fields that represent scalar numeric metrics.
Examples of measurements: score, time, counters, position, etc.

Example: for an in-game event that tracks the highest match score for a particular difficulty level: 
The difficulty level should be included in dimensions, and the score should be included in measurements.
</summary>
        <remarks>
The name of the event, and the names of the event fields (both dimensions and measurements), must match
the names declared in the title's service configuration. The names are case insensitive.
If the API writes an event with a name that does not match a name in the service configuration, the
service drops the event with no notification.
</remarks>
      </Docs>
    </Member>
  </Members>
</Type>