<Type Name="TitleStorageService" FullName="Microsoft.Xbox.Services.TitleStorage.TitleStorageService">
  <TypeSignature Language="C#" Value="public sealed class TitleStorageService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TitleStorageService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.TitleStorage.TitleStorageService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TitleStorageService" />
  <TypeSignature Language="F#" Value="type TitleStorageService = class&#xA;    interface __ITitleStorageServicePublicNonVirtuals" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Represents an endpoint that provides methods that you can use to access the Title Storage service.
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DeleteBlobAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction DeleteBlobAsync (Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata blobMetadata, bool deleteOnlyIfETagMatches);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncAction DeleteBlobAsync([in]class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata blobMetadata, [in]bool deleteOnlyIfETagMatches) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.TitleStorage.TitleStorageService.DeleteBlobAsync(Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteBlobAsync (blobMetadata As TitleStorageBlobMetadata, deleteOnlyIfETagMatches As Boolean) As IAsyncAction" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlobAsync : Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata * bool -&gt; Windows.Foundation.IAsyncAction&#xA;override this.DeleteBlobAsync : Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata * bool -&gt; Windows.Foundation.IAsyncAction" Usage="titleStorageService.DeleteBlobAsync (blobMetadata, deleteOnlyIfETagMatches)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.TitleStorage.__ITitleStorageServicePublicNonVirtuals.DeleteBlobAsync(Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobMetadata" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata" />
        <Parameter Name="deleteOnlyIfETagMatches" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="blobMetadata">The blob metadata for the title storage blob to delete.</param>
        <param name="deleteOnlyIfETagMatches">To be added.</param>
        <summary>
Deletes a blob from title storage.
</summary>
        <returns>
An interface for tracking the progress of the asynchronous call.
</returns>
        <remarks>Calls
V1 DELETE trustedplatform/users/xuid({xuid})/scids/{scid}/data/{path},{type} or
V1 DELETE json/users/xuid({xuid})/scids/{scid}/data/{path},{type} or
V1 DELETE sessions/{sessionId}/scids/{scid}/data/{path},{type}
</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt; DownloadBlobAsync (Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata blobMetadata, Windows.Storage.Streams.IBuffer blobBuffer, Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition etagMatchCondition, string selectQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt; DownloadBlobAsync([in]class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata blobMetadata, [in]class Windows.Storage.Streams.IBuffer blobBuffer, [in]valuetype Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition etagMatchCondition, [in]string selectQuery) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.TitleStorage.TitleStorageService.DownloadBlobAsync(Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata,Windows.Storage.Streams.IBuffer,Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadBlobAsync (blobMetadata As TitleStorageBlobMetadata, blobBuffer As IBuffer, etagMatchCondition As TitleStorageETagMatchCondition, selectQuery As String) As IAsyncOperation(Of TitleStorageBlobResult)" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobAsync : Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata * Windows.Storage.Streams.IBuffer * Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt;&#xA;override this.DownloadBlobAsync : Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata * Windows.Storage.Streams.IBuffer * Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt;" Usage="titleStorageService.DownloadBlobAsync (blobMetadata, blobBuffer, etagMatchCondition, selectQuery)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.TitleStorage.__ITitleStorageServicePublicNonVirtuals.DownloadBlobAsync(Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata,Windows.Storage.Streams.IBuffer,Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("DownloadBlobAsync2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobMetadata" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata" />
        <Parameter Name="blobBuffer" Type="Windows.Storage.Streams.IBuffer" />
        <Parameter Name="etagMatchCondition" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition" />
        <Parameter Name="selectQuery" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="blobMetadata">The blob metadata for the title storage blob to download.</param>
        <param name="blobBuffer">The client provided buffer to contain the downloaded blob data.
The buffer must be large enough to store the downloaded blob. You can retrieve the required buffer size by getting the blob metadata.</param>
        <param name="etagMatchCondition">The ETag match condition used to determine if the blob should be downloaded.</param>
        <param name="selectQuery">A query string that contains a ConfigStorage filter string or JSONStorage json property name string to filter. (Optional)</param>
        <summary>
Dowloads blob data from title storage.
</summary>
        <returns>
An interface for tracking the progress of the asynchronous call.
The result is a TitleStorageBlobResult object containing the client provided blob buffer and an updated TitleStorageBlobMetadata object.
The metadata object contains updated ETag and Length properties.
</returns>
        <remarks>
This method throws ERROR_INSUFFICIENT_BUFFER (0x8007007A) if the blobBuffer doesn't have enough capacity to hold the blob data.

Calls V1 GET trustedplatform/users/xuid({xuid})/scids/{scid}/data/{path},{type} or
V1 GET json/users/xuid({xuid})/scids/{scid}/data/{path},{type} or
V1 GET global/scids/{scid}/data/{path},{type} or
V1 GET sessions/{sessionId}/scids/{scid}/data/{path},{type}
</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt; DownloadBlobAsync (Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata blobMetadata, Windows.Storage.Streams.IBuffer blobBuffer, Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition etagMatchCondition, string selectQuery, uint preferredDownloadBlockSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt; DownloadBlobAsync([in]class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata blobMetadata, [in]class Windows.Storage.Streams.IBuffer blobBuffer, [in]valuetype Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition etagMatchCondition, [in]string selectQuery, [in]unsigned int32 preferredDownloadBlockSize) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.TitleStorage.TitleStorageService.DownloadBlobAsync(Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata,Windows.Storage.Streams.IBuffer,Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadBlobAsync (blobMetadata As TitleStorageBlobMetadata, blobBuffer As IBuffer, etagMatchCondition As TitleStorageETagMatchCondition, selectQuery As String, preferredDownloadBlockSize As UInteger) As IAsyncOperation(Of TitleStorageBlobResult)" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobAsync : Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata * Windows.Storage.Streams.IBuffer * Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition * string * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt;&#xA;override this.DownloadBlobAsync : Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata * Windows.Storage.Streams.IBuffer * Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition * string * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt;" Usage="titleStorageService.DownloadBlobAsync (blobMetadata, blobBuffer, etagMatchCondition, selectQuery, preferredDownloadBlockSize)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.TitleStorage.__ITitleStorageServicePublicNonVirtuals.DownloadBlobAsync(Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata,Windows.Storage.Streams.IBuffer,Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition,System.String,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("DownloadBlobAsync1")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobMetadata" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata" />
        <Parameter Name="blobBuffer" Type="Windows.Storage.Streams.IBuffer" />
        <Parameter Name="etagMatchCondition" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition" />
        <Parameter Name="selectQuery" Type="System.String" />
        <Parameter Name="preferredDownloadBlockSize" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="blobMetadata">The blob metadata for the title storage blob to download.</param>
        <param name="blobBuffer">The client provided buffer to contain the downloaded blob data.
The buffer must be large enough to store the downloaded blob. You can retrieve the required buffer size by getting the blob metadata.</param>
        <param name="etagMatchCondition">The ETag match condition used to determine if the blob should be downloaded.</param>
        <param name="selectQuery">A query string that contains a ConfigStorage filter string or JSONStorage json property name string to filter. (Optional)</param>
        <param name="preferredDownloadBlockSize">The preferred download block size in bytes for binary blobs. </param>
        <summary>
Dowloads blob data from title storage.
</summary>
        <returns>
An interface for tracking the progress of the asynchronous call.
The result is a TitleStorageBlobResult object containing the client provided blob buffer and an updated TitleStorageBlobMetadata object.
The metadata object will contain updated ETag and Length properties</returns>
        <remarks>
This method will throw ERROR_INSUFFICIENT_BUFFER (0x8007007A) if the blobBuffer doesn't have enough capacity to hold the blob data.
Calls V1 GET trustedplatform/users/xuid({xuid})/scids/{scid}/data/{path},{type} or
V1 GET json/users/xuid({xuid})/scids/{scid}/data/{path},{type} or
V1 GET global/scids/{scid}/data/{path},{type} or
V1 GET sessions/{sessionId}/scids/{scid}/data/{path},{type}
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobMetadataAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt; GetBlobMetadataAsync (string serviceConfigurationId, Microsoft.Xbox.Services.TitleStorage.TitleStorageType storageType, string blobPath, string xboxUserId, uint skipItems, uint maxItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt; GetBlobMetadataAsync([in]string serviceConfigurationId, [in]valuetype Microsoft.Xbox.Services.TitleStorage.TitleStorageType storageType, [in]string blobPath, [in]string xboxUserId, [in]unsigned int32 skipItems, [in]unsigned int32 maxItems) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.TitleStorage.TitleStorageService.GetBlobMetadataAsync(System.String,Microsoft.Xbox.Services.TitleStorage.TitleStorageType,System.String,System.String,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBlobMetadataAsync (serviceConfigurationId As String, storageType As TitleStorageType, blobPath As String, xboxUserId As String, skipItems As UInteger, maxItems As UInteger) As IAsyncOperation(Of TitleStorageBlobMetadataResult)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobMetadataAsync : string * Microsoft.Xbox.Services.TitleStorage.TitleStorageType * string * string * uint32 * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt;&#xA;override this.GetBlobMetadataAsync : string * Microsoft.Xbox.Services.TitleStorage.TitleStorageType * string * string * uint32 * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt;" Usage="titleStorageService.GetBlobMetadataAsync (serviceConfigurationId, storageType, blobPath, xboxUserId, skipItems, maxItems)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.TitleStorage.__ITitleStorageServicePublicNonVirtuals.GetBlobMetadataAsync(System.String,Microsoft.Xbox.Services.TitleStorage.TitleStorageType,System.String,System.String,System.UInt32,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="storageType" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageType" />
        <Parameter Name="blobPath" Type="System.String" />
        <Parameter Name="xboxUserId" Type="System.String" />
        <Parameter Name="skipItems" Type="System.UInt32" />
        <Parameter Name="maxItems" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">The service configuration ID (SCID) of the title</param>
        <param name="storageType">The storage type to get blob metadata objects for.</param>
        <param name="blobPath">The root path to search.  The results include all blobs contained in this path and all subpaths. (Optional)</param>
        <param name="xboxUserId">The Xbox User ID of the title storage to enumerate. Pass nullptr when searching for GlobalStorage type data. (Optional)</param>
        <param name="skipItems">The number of items to skip before returning results.</param>
        <param name="maxItems">The maximum number of items to return.</param>
        <summary>
Gets a list of metadata information about a file in storage, given a specified service configuration, storage type, and storage ID.
</summary>
        <returns>
An interface for tracking the process of the asynchronous call.
The result is a TitleStorageBlobMetadataResult object containing the list of enumerated blob metadata objects.
</returns>
        <remarks>Calls
V1 GET trustedplatform/users/xuid({xuid})/scids/{scid}/data/{path}?maxItems={maxItems}[skipItems={skipItems}] or
V1 GET json/users/xuid({xuid})/scids/{scid}/data/{path}?maxItems={maxItems}[skipItems={skipItems}] or
V1 GET global/scids/{scid}/data/{path}?maxItems={maxItems}[skipItems={skipItems}]
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobMetadataForSessionStorageAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt; GetBlobMetadataForSessionStorageAsync (string serviceConfigurationId, string blobPath, string multiplayerSessionTemplateName, string multiplayerSessionName, uint skipItems, uint maxItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt; GetBlobMetadataForSessionStorageAsync([in]string serviceConfigurationId, [in]string blobPath, [in]string multiplayerSessionTemplateName, [in]string multiplayerSessionName, [in]unsigned int32 skipItems, [in]unsigned int32 maxItems) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.TitleStorage.TitleStorageService.GetBlobMetadataForSessionStorageAsync(System.String,System.String,System.String,System.String,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBlobMetadataForSessionStorageAsync (serviceConfigurationId As String, blobPath As String, multiplayerSessionTemplateName As String, multiplayerSessionName As String, skipItems As UInteger, maxItems As UInteger) As IAsyncOperation(Of TitleStorageBlobMetadataResult)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobMetadataForSessionStorageAsync : string * string * string * string * uint32 * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt;&#xA;override this.GetBlobMetadataForSessionStorageAsync : string * string * string * string * uint32 * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt;" Usage="titleStorageService.GetBlobMetadataForSessionStorageAsync (serviceConfigurationId, blobPath, multiplayerSessionTemplateName, multiplayerSessionName, skipItems, maxItems)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.TitleStorage.__ITitleStorageServicePublicNonVirtuals.GetBlobMetadataForSessionStorageAsync(System.String,System.String,System.String,System.String,System.UInt32,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Deprecated("Title Storage for sessions has been deprecated. Use universal instead.", Windows.Foundation.Metadata.DeprecationType.Deprecate, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadataResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="blobPath" Type="System.String" />
        <Parameter Name="multiplayerSessionTemplateName" Type="System.String" />
        <Parameter Name="multiplayerSessionName" Type="System.String" />
        <Parameter Name="skipItems" Type="System.UInt32" />
        <Parameter Name="maxItems" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">The service configuration ID (SCID) of the title</param>
        <param name="blobPath">The root path to search.  The results include all blobs contained in this path and all subpaths. (Optional)</param>
        <param name="multiplayerSessionTemplateName">The multiplayer session template name for the session to get blob metadata objects for.</param>
        <param name="multiplayerSessionName">The multiplayer session name for the session to get blob metadata objects for.</param>
        <param name="skipItems">The number of items to skip before returning results.</param>
        <param name="maxItems">The maximum number of items to return.</param>
        <summary>
Gets a list of metadata information about a file in session storage under a given path for the specified multiplayer session.
</summary>
        <returns>
An interface for tracking the process of the asynchronous call.
The result is a TitleStorageBlobMetadataResult object containing the list of enumerated blob metadata objects.
</returns>
        <remarks>Calls
V1 GET sessions/{sessionId}/scids/{scid}/data/{path}?maxItems={maxItems}[skipItems={skipItems}]
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt; GetQuotaAsync (string serviceConfigurationId, Microsoft.Xbox.Services.TitleStorage.TitleStorageType storageType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt; GetQuotaAsync([in]string serviceConfigurationId, [in]valuetype Microsoft.Xbox.Services.TitleStorage.TitleStorageType storageType) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.TitleStorage.TitleStorageService.GetQuotaAsync(System.String,Microsoft.Xbox.Services.TitleStorage.TitleStorageType)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetQuotaAsync (serviceConfigurationId As String, storageType As TitleStorageType) As IAsyncOperation(Of TitleStorageQuota)" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaAsync : string * Microsoft.Xbox.Services.TitleStorage.TitleStorageType -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt;&#xA;override this.GetQuotaAsync : string * Microsoft.Xbox.Services.TitleStorage.TitleStorageType -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt;" Usage="titleStorageService.GetQuotaAsync (serviceConfigurationId, storageType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.TitleStorage.__ITitleStorageServicePublicNonVirtuals.GetQuotaAsync(System.String,Microsoft.Xbox.Services.TitleStorage.TitleStorageType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="storageType" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageType" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">The service configuration ID (SCID) of the title</param>
        <param name="storageType">The storage type to get quota information for.</param>
        <summary>
Gets title storage quota information for the specified service configuration and storage type.
For user storage types (TrustedPlatform and Json) the request is made for the calling user's
Xbox user Id.
</summary>
        <returns>
An interface for tracking the process of the asynchronous call.
The result is a TitleStorageQuota object containing the quota information.
</returns>
        <remarks>Calls
V1 GET trustedplatform/users/xuid({xuid})/scids/{scid} or
V1 GET json/users/xuid({xuid})/scids/{scid} or
V1 GET global/scids/{scid}
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaForSessionStorageAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt; GetQuotaForSessionStorageAsync (string serviceConfigurationId, string multiplayerSessionTemplateName, string multiplayerSessionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt; GetQuotaForSessionStorageAsync([in]string serviceConfigurationId, [in]string multiplayerSessionTemplateName, [in]string multiplayerSessionName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.TitleStorage.TitleStorageService.GetQuotaForSessionStorageAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetQuotaForSessionStorageAsync (serviceConfigurationId As String, multiplayerSessionTemplateName As String, multiplayerSessionName As String) As IAsyncOperation(Of TitleStorageQuota)" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaForSessionStorageAsync : string * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt;&#xA;override this.GetQuotaForSessionStorageAsync : string * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt;" Usage="titleStorageService.GetQuotaForSessionStorageAsync (serviceConfigurationId, multiplayerSessionTemplateName, multiplayerSessionName)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.TitleStorage.__ITitleStorageServicePublicNonVirtuals.GetQuotaForSessionStorageAsync(System.String,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Deprecated("Title Storage for sessions has been deprecated. Use universal instead.", Windows.Foundation.Metadata.DeprecationType.Deprecate, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageQuota&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="multiplayerSessionTemplateName" Type="System.String" />
        <Parameter Name="multiplayerSessionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceConfigurationId">The service configuration ID (SCID) of the title</param>
        <param name="multiplayerSessionTemplateName">The multiplayer session template name for the session to get quota information for.</param>
        <param name="multiplayerSessionName">The multiplayer session name for the session to get quota information for.</param>
        <summary>
Gets title storage quota information for the SessionStorage associated with the specified multiplayer session.
</summary>
        <returns>
An interface for tracking the process of the asynchronous call.
The result is a TitleStorageQuota object containing the quota information.
</returns>
        <remarks>Calls
V1 GET sessions/{sessionId}/scids/{scid}
</remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadBlobAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata&gt; UploadBlobAsync (Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata blobMetadata, Windows.Storage.Streams.IBuffer blobBuffer, Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition etagMatchCondition, uint preferredUploadBlockSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata&gt; UploadBlobAsync([in]class Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata blobMetadata, [in]class Windows.Storage.Streams.IBuffer blobBuffer, [in]valuetype Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition etagMatchCondition, [in]unsigned int32 preferredUploadBlockSize) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.TitleStorage.TitleStorageService.UploadBlobAsync(Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata,Windows.Storage.Streams.IBuffer,Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadBlobAsync (blobMetadata As TitleStorageBlobMetadata, blobBuffer As IBuffer, etagMatchCondition As TitleStorageETagMatchCondition, preferredUploadBlockSize As UInteger) As IAsyncOperation(Of TitleStorageBlobMetadata)" />
      <MemberSignature Language="F#" Value="abstract member UploadBlobAsync : Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata * Windows.Storage.Streams.IBuffer * Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata&gt;&#xA;override this.UploadBlobAsync : Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata * Windows.Storage.Streams.IBuffer * Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata&gt;" Usage="titleStorageService.UploadBlobAsync (blobMetadata, blobBuffer, etagMatchCondition, preferredUploadBlockSize)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.TitleStorage.__ITitleStorageServicePublicNonVirtuals.UploadBlobAsync(Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata,Windows.Storage.Streams.IBuffer,Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobMetadata" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageBlobMetadata" />
        <Parameter Name="blobBuffer" Type="Windows.Storage.Streams.IBuffer" />
        <Parameter Name="etagMatchCondition" Type="Microsoft.Xbox.Services.TitleStorage.TitleStorageETagMatchCondition" />
        <Parameter Name="preferredUploadBlockSize" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="blobMetadata">Contains properties required to upload the buffer to title storage.  Uploads require a service configuration ID, blob path, blob type and storage type at a minimum.</param>
        <param name="blobBuffer">The buffer containing the blob data to upload.  This buffer must be available for the duration of the async operation.  Clients should not modify the buffer while an upload is in progress.</param>
        <param name="etagMatchCondition">The ETag match condition used to determine if the blob data should be uploaded.</param>
        <param name="preferredUploadBlockSize">The preferred upload block size in bytes for binary blobs. Binary blobs are
uploaded in multiple chunks of this size if they exceed it.  Larger sizes are preferred by the service.
If timeouts occur, the app should retry with a smaller size.  Block size must be within the 1K to 4MB range.  This method
will use a default size if this parameter is not within the acceptable range.  The current minimum size is 1024 bytes,
the maximum size is 4194304 bytes, and the default size is 262144 bytes.
</param>
        <summary>
Uploads a blob to title storage.
</summary>
        <returns>
An interface for tracking the progress of the asynchronous call.
The result is a TitleStorageBlobMetadata object with updated Etag and Length properties.
</returns>
        <remarks>
V1 PUT json/users/xuid({xuid})/scids/{scid}/data/{path},{type} or
V1 PUT global/scids/{scid}/data/{path},{type} or
V1 PUT sessions/{sessionId}/scids/{scid}/data/{path},{type}
</remarks>
      </Docs>
    </Member>
  </Members>
</Type>