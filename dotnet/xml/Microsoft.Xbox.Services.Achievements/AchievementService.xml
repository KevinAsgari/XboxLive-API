<Type Name="AchievementService" FullName="Microsoft.Xbox.Services.Achievements.AchievementService">
  <TypeSignature Language="C#" Value="public sealed class AchievementService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed AchievementService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.Achievements.AchievementService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AchievementService" />
  <TypeSignature Language="F#" Value="type AchievementService = class&#xA;    interface __IAchievementServicePublicNonVirtuals" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Represents an endpoint that you can use to access the Achievement service.
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetAchievementAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Achievements.Achievement&gt; GetAchievementAsync (string xboxUserId, string serviceConfigurationId, string achievementId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Achievements.Achievement&gt; GetAchievementAsync([in]string xboxUserId, [in]string serviceConfigurationId, [in]string achievementId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Achievements.AchievementService.GetAchievementAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAchievementAsync (xboxUserId As String, serviceConfigurationId As String, achievementId As String) As IAsyncOperation(Of Achievement)" />
      <MemberSignature Language="F#" Value="abstract member GetAchievementAsync : string * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Achievements.Achievement&gt;&#xA;override this.GetAchievementAsync : string * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Achievements.Achievement&gt;" Usage="achievementService.GetAchievementAsync (xboxUserId, serviceConfigurationId, achievementId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Achievements.__IAchievementServicePublicNonVirtuals.GetAchievementAsync(System.String,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Achievements.Achievement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xboxUserId" Type="System.String" />
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="achievementId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xboxUserId">The Xbox User ID of the player.</param>
        <param name="serviceConfigurationId">The service configuration ID (SCID) for the service.</param>
        <param name="achievementId">The achievement ID.</param>
        <summary>
Returns a specific Achievement object for a specified player.
</summary>
        <returns>The requested Achievement object if it exists.
If the achievement does not exist, the method throws a Platform::COMException() exception,
with hr = INET_E_OBJECT_NOT_FOUND (0x800C0006L).</returns>
        <remarks>
Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the
IAsyncOperation&lt;TResult&gt;.Completed property. When the asynchronous operation is complete, the result of the
operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

This method calls V2 GET /users/xuid({xuid})/achievements/{scid}/{achievementId}.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAchievementsForTitleIdAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Achievements.AchievementsResult&gt; GetAchievementsForTitleIdAsync (string xboxUserId, uint titleId, Microsoft.Xbox.Services.Achievements.AchievementType type, bool unlockedOnly, Microsoft.Xbox.Services.Achievements.AchievementOrderBy orderBy, uint skipItems, uint maxItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Achievements.AchievementsResult&gt; GetAchievementsForTitleIdAsync([in]string xboxUserId, [in]unsigned int32 titleId, [in]valuetype Microsoft.Xbox.Services.Achievements.AchievementType type, [in]bool unlockedOnly, [in]valuetype Microsoft.Xbox.Services.Achievements.AchievementOrderBy orderBy, [in]unsigned int32 skipItems, [in]unsigned int32 maxItems) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Achievements.AchievementService.GetAchievementsForTitleIdAsync(System.String,System.UInt32,Microsoft.Xbox.Services.Achievements.AchievementType,System.Boolean,Microsoft.Xbox.Services.Achievements.AchievementOrderBy,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAchievementsForTitleIdAsync (xboxUserId As String, titleId As UInteger, type As AchievementType, unlockedOnly As Boolean, orderBy As AchievementOrderBy, skipItems As UInteger, maxItems As UInteger) As IAsyncOperation(Of AchievementsResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAchievementsForTitleIdAsync : string * uint32 * Microsoft.Xbox.Services.Achievements.AchievementType * bool * Microsoft.Xbox.Services.Achievements.AchievementOrderBy * uint32 * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Achievements.AchievementsResult&gt;&#xA;override this.GetAchievementsForTitleIdAsync : string * uint32 * Microsoft.Xbox.Services.Achievements.AchievementType * bool * Microsoft.Xbox.Services.Achievements.AchievementOrderBy * uint32 * uint32 -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Achievements.AchievementsResult&gt;" Usage="achievementService.GetAchievementsForTitleIdAsync (xboxUserId, titleId, type, unlockedOnly, orderBy, skipItems, maxItems)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Achievements.__IAchievementServicePublicNonVirtuals.GetAchievementsForTitleIdAsync(System.String,System.UInt32,Microsoft.Xbox.Services.Achievements.AchievementType,System.Boolean,Microsoft.Xbox.Services.Achievements.AchievementOrderBy,System.UInt32,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Achievements.AchievementsResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xboxUserId" Type="System.String" />
        <Parameter Name="titleId" Type="System.UInt32" />
        <Parameter Name="type" Type="Microsoft.Xbox.Services.Achievements.AchievementType" />
        <Parameter Name="unlockedOnly" Type="System.Boolean" />
        <Parameter Name="orderBy" Type="Microsoft.Xbox.Services.Achievements.AchievementOrderBy" />
        <Parameter Name="skipItems" Type="System.UInt32" />
        <Parameter Name="maxItems" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="xboxUserId">The Xbox User ID of the player.</param>
        <param name="titleId">The title ID.</param>
        <param name="type">The achievement type to retrieve.</param>
        <param name="unlockedOnly">Indicates whether to return unlocked achievements only.</param>
        <param name="orderBy">To be added.</param>
        <param name="skipItems">The number of achievements to skip.</param>
        <param name="maxItems">The maximum number of achievements the result can contain.  Pass 0 to attempt
to retrieve all items.</param>
        <summary>
Returns an AchievementsResult object containing the first page of achievements
for a player of the specified title.
</summary>
        <returns>An AchievementsResult object that contains a list of Achievement objects.</returns>
        <remarks>
Returns an IAsyncOperation&lt;TResult&gt; object that represents the state of the asynchronous operation.
Completion of the asynchronous operation is signaled by using a handler that is passed to the
IAsyncOperation&lt;TResult&gt;.Completed property. When the asynchronous operation is complete, the result of the
operation can be retrieved by using the IAsyncOperation&lt;TResult&gt;.GetResults method.

See AchievementsResult::GetNextAsync to page in the next set of results.

This method calls V2 GET /users/xuid({xuid})/achievements.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAchievementAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction UpdateAchievementAsync (string xboxUserId, string achievementId, uint percentComplete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncAction UpdateAchievementAsync([in]string xboxUserId, [in]string achievementId, [in]unsigned int32 percentComplete) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Achievements.AchievementService.UpdateAchievementAsync(System.String,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateAchievementAsync (xboxUserId As String, achievementId As String, percentComplete As UInteger) As IAsyncAction" />
      <MemberSignature Language="F#" Value="abstract member UpdateAchievementAsync : string * string * uint32 -&gt; Windows.Foundation.IAsyncAction&#xA;override this.UpdateAchievementAsync : string * string * uint32 -&gt; Windows.Foundation.IAsyncAction" Usage="achievementService.UpdateAchievementAsync (xboxUserId, achievementId, percentComplete)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Achievements.__IAchievementServicePublicNonVirtuals.UpdateAchievementAsync(System.String,System.String,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("UpdateAchievementAsync2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xboxUserId" Type="System.String" />
        <Parameter Name="achievementId" Type="System.String" />
        <Parameter Name="percentComplete" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="xboxUserId">The Xbox User ID of the player.</param>
        <param name="achievementId">The achievement ID as defined by XDP or Dev Center.</param>
        <param name="percentComplete">The completion percentage of the achievement to indicate progress.
Valid values are from 1 to 100. Set to 100 to unlock the achievement.
Progress will be set by the server to the highest value sent</param>
        <summary>
Allow achievement progress to be updated and achievements to be unlocked.
This API will work even when offline. On PC and Xbox One, updates will be 
posted by the system when connection is re-established even if the title isn't running.
</summary>
        <returns>To be added.</returns>
        <remarks>
Returns a task&lt;T&gt; object that represents the state of the asynchronous operation.

This method calls V2 POST /users/xuid({xuid})/achievements/{scid}/update
</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAchievementAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncAction UpdateAchievementAsync (string xboxUserId, uint titleId, string serviceConfigurationId, string achievementId, uint percentComplete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncAction UpdateAchievementAsync([in]string xboxUserId, [in]unsigned int32 titleId, [in]string serviceConfigurationId, [in]string achievementId, [in]unsigned int32 percentComplete) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Achievements.AchievementService.UpdateAchievementAsync(System.String,System.UInt32,System.String,System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdateAchievementAsync (xboxUserId As String, titleId As UInteger, serviceConfigurationId As String, achievementId As String, percentComplete As UInteger) As IAsyncAction" />
      <MemberSignature Language="F#" Value="abstract member UpdateAchievementAsync : string * uint32 * string * string * uint32 -&gt; Windows.Foundation.IAsyncAction&#xA;override this.UpdateAchievementAsync : string * uint32 * string * string * uint32 -&gt; Windows.Foundation.IAsyncAction" Usage="achievementService.UpdateAchievementAsync (xboxUserId, titleId, serviceConfigurationId, achievementId, percentComplete)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Achievements.__IAchievementServicePublicNonVirtuals.UpdateAchievementAsync(System.String,System.UInt32,System.String,System.String,System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Windows.Foundation.Metadata.Overload("UpdateAchievementAsync1")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xboxUserId" Type="System.String" />
        <Parameter Name="titleId" Type="System.UInt32" />
        <Parameter Name="serviceConfigurationId" Type="System.String" />
        <Parameter Name="achievementId" Type="System.String" />
        <Parameter Name="percentComplete" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="xboxUserId">The Xbox User ID of the player.</param>
        <param name="titleId">The title ID.</param>
        <param name="serviceConfigurationId">The service configuration ID (SCID) for the title.</param>
        <param name="achievementId">The achievement ID as defined by XDP or Dev Center.</param>
        <param name="percentComplete">The completion percentage of the achievement to indicate progress.
Valid values are from 1 to 100. Set to 100 to unlock the achievement.
Progress will be set by the server to the highest value sent</param>
        <summary>
Allow achievement progress to be updated and achievements to be unlocked.
This API will work even when offline. On PC and Xbox One, updates will be 
posted by the system when connection is re-established even if the title isn't running.
</summary>
        <returns>To be added.</returns>
        <remarks>
Returns a task&lt;T&gt; object that represents the state of the asynchronous operation.

This method calls V2 POST /users/xuid({xuid})/achievements/{scid}/update
</remarks>
      </Docs>
    </Member>
  </Members>
</Type>