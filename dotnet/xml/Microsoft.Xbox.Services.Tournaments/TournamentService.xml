<Type Name="TournamentService" FullName="Microsoft.Xbox.Services.Tournaments.TournamentService">
  <TypeSignature Language="C#" Value="public sealed class TournamentService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TournamentService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Xbox.Services.Tournaments.TournamentService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TournamentService" />
  <TypeSignature Language="F#" Value="type TournamentService = class&#xA;    interface __ITournamentServicePublicNonVirtuals&#xA;    interface __ITournamentServiceProtectedNonVirtuals" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
    <AssemblyVersion>255.255.255.255</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Windows.Foundation.Metadata.Version(1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
Represents an endpoint that you can use to access the Tournament service.
</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetTeamDetailsAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TeamInfo&gt; GetTeamDetailsAsync (string organizerId, string tournamentId, string teamId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Tournaments.TeamInfo&gt; GetTeamDetailsAsync([in]string organizerId, [in]string tournamentId, [in]string teamId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Tournaments.TournamentService.GetTeamDetailsAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTeamDetailsAsync (organizerId As String, tournamentId As String, teamId As String) As IAsyncOperation(Of TeamInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetTeamDetailsAsync : string * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TeamInfo&gt;&#xA;override this.GetTeamDetailsAsync : string * string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TeamInfo&gt;" Usage="tournamentService.GetTeamDetailsAsync (organizerId, tournamentId, teamId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Tournaments.__ITournamentServicePublicNonVirtuals.GetTeamDetailsAsync(System.String,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TeamInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="organizerId" Type="System.String" />
        <Parameter Name="tournamentId" Type="System.String" />
        <Parameter Name="teamId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="organizerId">The ID of the tournament organizer. This is case sensitive.</param>
        <param name="tournamentId">The ID of the tournament.</param>
        <param name="teamId">The ID of the team.</param>
        <summary>
Returns a specific tournament object.
The tournament ID and the organizer ID together uniquely identify a tournament.
</summary>
        <returns>A specific tournament if they exist.</returns>
        <remarks>
Returns a concurrency::task{T} object that represents the state of the asynchronous operation.
This method calls GET /tournaments/{organizer}/{id}/teams/{teamId}
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTeamsAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TeamRequestResult&gt; GetTeamsAsync (Microsoft.Xbox.Services.Tournaments.TeamRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Tournaments.TeamRequestResult&gt; GetTeamsAsync([in]class Microsoft.Xbox.Services.Tournaments.TeamRequest request) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Tournaments.TournamentService.GetTeamsAsync(Microsoft.Xbox.Services.Tournaments.TeamRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTeamsAsync (request As TeamRequest) As IAsyncOperation(Of TeamRequestResult)" />
      <MemberSignature Language="F#" Value="abstract member GetTeamsAsync : Microsoft.Xbox.Services.Tournaments.TeamRequest -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TeamRequestResult&gt;&#xA;override this.GetTeamsAsync : Microsoft.Xbox.Services.Tournaments.TeamRequest -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TeamRequestResult&gt;" Usage="tournamentService.GetTeamsAsync request" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Tournaments.__ITournamentServicePublicNonVirtuals.GetTeamsAsync(Microsoft.Xbox.Services.Tournaments.TeamRequest)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TeamRequestResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.Xbox.Services.Tournaments.TeamRequest" />
      </Parameters>
      <Docs>
        <param name="request">A team request object that retrieves team based on the configuration of the request.</param>
        <summary>
Returns a list of tournaments for the current title.
</summary>
        <returns>A list of teams if they exist.</returns>
        <remarks>
Returns a concurrency::task{T} object that represents the state of the asynchronous operation.
This method calls GET /tournaments/{organizer}/{id}/teams
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTournamentDetailsAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.Tournament&gt; GetTournamentDetailsAsync (string organizerId, string tournamentId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Tournaments.Tournament&gt; GetTournamentDetailsAsync([in]string organizerId, [in]string tournamentId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Tournaments.TournamentService.GetTournamentDetailsAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTournamentDetailsAsync (organizerId As String, tournamentId As String) As IAsyncOperation(Of Tournament)" />
      <MemberSignature Language="F#" Value="abstract member GetTournamentDetailsAsync : string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.Tournament&gt;&#xA;override this.GetTournamentDetailsAsync : string * string -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.Tournament&gt;" Usage="tournamentService.GetTournamentDetailsAsync (organizerId, tournamentId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Tournaments.__ITournamentServicePublicNonVirtuals.GetTournamentDetailsAsync(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.Tournament&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="organizerId" Type="System.String" />
        <Parameter Name="tournamentId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="organizerId">The ID of the tournament organizer.</param>
        <param name="tournamentId">The ID of the tournament.</param>
        <summary>
Returns a specific tournament object.
The tournament ID and the organizer ID together uniquely identify a tournament.
</summary>
        <returns>The specific tournament if they exist.</returns>
        <remarks>
Returns a concurrency::task{T} object that represents the state of the asynchronous operation.
This method calls GET /tournaments/{organizer}/{id}.
</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTournamentsAsync">
      <MemberSignature Language="C#" Value="public Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TournamentRequestResult&gt; GetTournamentsAsync (Microsoft.Xbox.Services.Tournaments.TournamentRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Windows.Foundation.IAsyncOperation`1&lt;class Microsoft.Xbox.Services.Tournaments.TournamentRequestResult&gt; GetTournamentsAsync([in]class Microsoft.Xbox.Services.Tournaments.TournamentRequest request) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Tournaments.TournamentService.GetTournamentsAsync(Microsoft.Xbox.Services.Tournaments.TournamentRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTournamentsAsync (request As TournamentRequest) As IAsyncOperation(Of TournamentRequestResult)" />
      <MemberSignature Language="F#" Value="abstract member GetTournamentsAsync : Microsoft.Xbox.Services.Tournaments.TournamentRequest -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TournamentRequestResult&gt;&#xA;override this.GetTournamentsAsync : Microsoft.Xbox.Services.Tournaments.TournamentRequest -&gt; Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TournamentRequestResult&gt;" Usage="tournamentService.GetTournamentsAsync request" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Tournaments.__ITournamentServicePublicNonVirtuals.GetTournamentsAsync(Microsoft.Xbox.Services.Tournaments.TournamentRequest)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.IAsyncOperation&lt;Microsoft.Xbox.Services.Tournaments.TournamentRequestResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.Xbox.Services.Tournaments.TournamentRequest" />
      </Parameters>
      <Docs>
        <param name="request">A tournament request object that retrieves tournaments based on the configuration of the request.</param>
        <summary>
Returns a list of tournaments for the current title.
</summary>
        <returns>A list of tournaments if they exist.</returns>
        <remarks>
Returns a concurrency::task{T} object that represents the state of the asynchronous operation.
This method calls GET /tournaments
</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeToTeamChange">
      <MemberSignature Language="C#" Value="public Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription SubscribeToTeamChange (string organizerId, string tournamentId, string teamId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription SubscribeToTeamChange([in]string organizerId, [in]string tournamentId, [in]string teamId) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Tournaments.TournamentService.SubscribeToTeamChange(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeToTeamChange (organizerId As String, tournamentId As String, teamId As String) As TeamChangeSubscription" />
      <MemberSignature Language="F#" Value="abstract member SubscribeToTeamChange : string * string * string -&gt; Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription&#xA;override this.SubscribeToTeamChange : string * string * string -&gt; Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription" Usage="tournamentService.SubscribeToTeamChange (organizerId, tournamentId, teamId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Tournaments.__ITournamentServicePublicNonVirtuals.SubscribeToTeamChange(System.String,System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="organizerId" Type="System.String" />
        <Parameter Name="tournamentId" Type="System.String" />
        <Parameter Name="teamId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="organizerId">The ID of the tournament organizer. This is case sensitive.</param>
        <param name="tournamentId">The ID of the tournament.</param>
        <param name="teamId">The ID of the team.</param>
        <summary>
Subscribes to team update notifications via the TeamChanged event.
</summary>
        <returns>A subscription object that contains the state of the subscription. 
You can register an event handler for team changes by using the TeamChanged event.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TeamChanged">
      <MemberSignature Language="C#" Value="public event Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Tournaments.TeamChangeEventArgs&gt; TeamChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Windows.Foundation.EventHandler`1&lt;class Microsoft.Xbox.Services.Tournaments.TeamChangeEventArgs&gt; TeamChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Xbox.Services.Tournaments.TournamentService.TeamChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TeamChanged As EventHandler(Of TeamChangeEventArgs) " />
      <MemberSignature Language="F#" Value="member this.TeamChanged : Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Tournaments.TeamChangeEventArgs&gt; " Usage="member this.TeamChanged : Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Tournaments.TeamChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:Microsoft.Xbox.Services.Tournaments.__ITournamentServicePublicNonVirtuals.TeamChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Windows.Foundation.EventHandler&lt;Microsoft.Xbox.Services.Tournaments.TeamChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
Registers for team change notifications.  Event handlers receive a TeamChangeEventArgs^ object.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsubscribeFromTeamChange">
      <MemberSignature Language="C#" Value="public void UnsubscribeFromTeamChange (Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription subscription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnsubscribeFromTeamChange([in]class Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription subscription) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Xbox.Services.Tournaments.TournamentService.UnsubscribeFromTeamChange(Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnsubscribeFromTeamChange (subscription As TeamChangeSubscription)" />
      <MemberSignature Language="F#" Value="abstract member UnsubscribeFromTeamChange : Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription -&gt; unit&#xA;override this.UnsubscribeFromTeamChange : Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription -&gt; unit" Usage="tournamentService.UnsubscribeFromTeamChange subscription" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Xbox.Services.Tournaments.__ITournamentServicePublicNonVirtuals.UnsubscribeFromTeamChange(Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Xbox.Services</AssemblyName>
        <AssemblyVersion>255.255.255.255</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscription" Type="Microsoft.Xbox.Services.Tournaments.TeamChangeSubscription" />
      </Parameters>
      <Docs>
        <param name="subscription">The subscription object to unsubscribe.</param>
        <summary>
Unsubscribe a previously created team change subscription.
</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>